        -:    0:Source:C:/Program Files/JetBrains/CLion 2024.3.2/bin/mingw/lib/gcc/x86_64-w64-mingw32/13.1.0/include/c++/bits/unique_ptr.h
        -:    0:Graph:D:\Projects\SoftAcademy\Tasks\cmake-build-release-coverage\googletest\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\Projects\SoftAcademy\Tasks\cmake-build-release-coverage\googletest\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// unique_ptr implementation -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2008-2023 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/unique_ptr.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{memory}
        -:   28: */
        -:   29:
        -:   30:#ifndef _UNIQUE_PTR_H
        -:   31:#define _UNIQUE_PTR_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <debug/assertions.h>
        -:   35:#include <type_traits>
        -:   36:#include <tuple>
        -:   37:#include <bits/stl_function.h>
        -:   38:#include <bits/functional_hash.h>
        -:   39:#if __cplusplus >= 202002L
        -:   40:# include <compare>
        -:   41:# if _GLIBCXX_HOSTED
        -:   42:#  include <ostream>
        -:   43:# endif
        -:   44:#endif
        -:   45:
        -:   46:/* Duplicate definition with ptr_traits.h.  */
        -:   47:#if __cplusplus > 202002L && defined(__cpp_constexpr_dynamic_alloc)
        -:   48:# define __cpp_lib_constexpr_memory 202202L
        -:   49:#elif __cplusplus > 201703L
        -:   50:# define __cpp_lib_constexpr_memory 201811L
        -:   51:#endif
        -:   52:
        -:   53:namespace std _GLIBCXX_VISIBILITY(default)
        -:   54:{
        -:   55:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   56:
        -:   57:  /**
        -:   58:   * @addtogroup pointer_abstractions
        -:   59:   * @{
        -:   60:   */
        -:   61:
        -:   62:#if _GLIBCXX_USE_DEPRECATED
        -:   63:#pragma GCC diagnostic push
        -:   64:#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        -:   65:  template<typename> class auto_ptr;
        -:   66:#pragma GCC diagnostic pop
        -:   67:#endif
        -:   68:
        -:   69:  /** Primary template of default_delete, used by unique_ptr for single objects
        -:   70:   *
        -:   71:   * @headerfile memory
        -:   72:   * @since C++11
        -:   73:   */
        -:   74:  template<typename _Tp>
        -:   75:    struct default_delete
        -:   76:    {
        -:   77:      /// Default constructor
        -:   78:      constexpr default_delete() noexcept = default;
        -:   79:
        -:   80:      /** @brief Converting constructor.
        -:   81:       *
        -:   82:       * Allows conversion from a deleter for objects of another type, `_Up`,
        -:   83:       * only if `_Up*` is convertible to `_Tp*`.
        -:   84:       */
        -:   85:      template<typename _Up,
        -:   86:	       typename = _Require<is_convertible<_Up*, _Tp*>>>
        -:   87:	_GLIBCXX23_CONSTEXPR
        -:   88:        default_delete(const default_delete<_Up>&) noexcept { }
        -:   89:
        -:   90:      /// Calls `delete __ptr`
        -:   91:      _GLIBCXX23_CONSTEXPR
        -:   92:      void
function _ZNKSt14default_deleteIN7testing8internal12_GLOBAL__N_122ThreadWithParamSupport15ThreadMainParamEEclEPS4_ called 0 returned 0% blocks executed 0%
    #####:   93:      operator()(_Tp* __ptr) const
        -:   94:      {
        -:   95:	static_assert(!is_void<_Tp>::value,
        -:   96:		      "can't delete pointer to incomplete type");
        -:   97:	static_assert(sizeof(_Tp)>0,
        -:   98:		      "can't delete pointer to incomplete type");
      69*:   99:	delete __ptr;
    %%%%%:   99-block  0
call    0 never executed
    %%%%%:   99-block  1
call    1 never executed
    %%%%%:   99-block  2
call    2 never executed
    %%%%%:   99-block  3
call    3 never executed
    %%%%%:   99-block  4
call    4 never executed
    $$$$$:   99-block  5
call    5 never executed
        1:   99-block  6
call    6 returned 1
    $$$$$:   99-block  7
call    7 never executed
    %%%%%:   99-block  8
call    8 never executed
    $$$$$:   99-block  9
call    9 never executed
    %%%%%:   99-block 10
call   10 never executed
    $$$$$:   99-block 11
call   11 never executed
    %%%%%:   99-block 12
call   12 never executed
    $$$$$:   99-block 13
call   13 never executed
    %%%%%:   99-block 14
branch 14 never executed (fallthrough)
branch 15 never executed
    %%%%%:   99-block 15
call   16 never executed
    %%%%%:   99-block 16
call   17 never executed
    %%%%%:   99-block 17
call   18 never executed
call   19 never executed
call   20 never executed
    %%%%%:   99-block 18
call   21 never executed
    %%%%%:   99-block 19
call   22 never executed
call   23 never executed
    %%%%%:   99-block 20
call   24 never executed
        9:   99-block 21
call   25 returned 9
    $$$$$:   99-block 22
call   26 never executed
call   27 never executed
        4:   99-block 23
call   28 returned 4
call   29 returned 4
    %%%%%:   99-block 24
call   30 never executed
    $$$$$:   99-block 25
call   31 never executed
    %%%%%:   99-block 26
call   32 never executed
    $$$$$:   99-block 27
call   33 never executed
    %%%%%:   99-block 28
call   34 never executed
    $$$$$:   99-block 29
call   35 never executed
    %%%%%:   99-block 30
call   36 never executed
    $$$$$:   99-block 31
call   37 never executed
    %%%%%:   99-block 32
call   38 never executed
    $$$$$:   99-block 33
call   39 never executed
    %%%%%:   99-block 34
call   40 never executed
    $$$$$:   99-block 35
call   41 never executed
    %%%%%:   99-block 36
call   42 never executed
    $$$$$:   99-block 37
call   43 never executed
    %%%%%:   99-block 38
call   44 never executed
    $$$$$:   99-block 39
call   45 never executed
    %%%%%:   99-block 40
call   46 never executed
    $$$$$:   99-block 41
call   47 never executed
    %%%%%:   99-block 42
call   48 never executed
    $$$$$:   99-block 43
call   49 never executed
    %%%%%:   99-block 44
call   50 never executed
    $$$$$:   99-block 45
call   51 never executed
    %%%%%:   99-block 46
call   52 never executed
    $$$$$:   99-block 47
call   53 never executed
    %%%%%:   99-block 48
call   54 never executed
    $$$$$:   99-block 49
call   55 never executed
    %%%%%:   99-block 50
call   56 never executed
    $$$$$:   99-block 51
call   57 never executed
    %%%%%:   99-block 52
call   58 never executed
    $$$$$:   99-block 53
call   59 never executed
    %%%%%:   99-block 54
call   60 never executed
    $$$$$:   99-block 55
call   61 never executed
    %%%%%:   99-block 56
call   62 never executed
    $$$$$:   99-block 57
call   63 never executed
    %%%%%:   99-block 58
call   64 never executed
    $$$$$:   99-block 59
call   65 never executed
    %%%%%:   99-block 60
call   66 never executed
    $$$$$:   99-block 61
call   67 never executed
    %%%%%:   99-block 62
call   68 never executed
    $$$$$:   99-block 63
call   69 never executed
    %%%%%:   99-block 64
call   70 never executed
    $$$$$:   99-block 65
call   71 never executed
    %%%%%:   99-block 66
call   72 never executed
    $$$$$:   99-block 67
call   73 never executed
    %%%%%:   99-block 68
call   74 never executed
    $$$$$:   99-block 69
call   75 never executed
       13:   99-block 70
call   76 returned 13
    $$$$$:   99-block 71
call   77 never executed
    %%%%%:   99-block 72
call   78 never executed
    $$$$$:   99-block 73
call   79 never executed
    %%%%%:   99-block 74
call   80 never executed
    $$$$$:   99-block 75
call   81 never executed
call   82 never executed
    %%%%%:   99-block 76
call   83 never executed
    $$$$$:   99-block 77
call   84 never executed
    %%%%%:   99-block 78
call   85 never executed
    $$$$$:   99-block 79
call   86 never executed
    %%%%%:   99-block 80
call   87 never executed
    %%%%%:   99-block 81
call   88 never executed
    %%%%%:   99-block 82
call   89 never executed
    $$$$$:   99-block 83
call   90 never executed
    $$$$$:   99-block 84
call   91 never executed
    $$$$$:   99-block 85
call   92 never executed
    $$$$$:   99-block 86
call   93 never executed
    $$$$$:   99-block 87
call   94 never executed
    $$$$$:   99-block 88
call   95 never executed
    %%%%%:   99-block 89
call   96 never executed
    $$$$$:   99-block 90
call   97 never executed
    %%%%%:   99-block 91
call   98 never executed
    $$$$$:   99-block 92
call   99 never executed
    %%%%%:   99-block 93
call   100 never executed
    $$$$$:   99-block 94
call   101 never executed
    %%%%%:   99-block 95
call   102 never executed
    $$$$$:   99-block 96
call   103 never executed
    %%%%%:   99-block 97
call   104 never executed
    $$$$$:   99-block 98
call   105 never executed
    %%%%%:   99-block 99
call   106 never executed
    $$$$$:   99-block 100
call   107 never executed
    %%%%%:   99-block 101
call   108 never executed
    $$$$$:   99-block 102
call   109 never executed
    %%%%%:   99-block 103
call   110 never executed
    $$$$$:   99-block 104
call   111 never executed
    %%%%%:   99-block 105
call   112 never executed
    $$$$$:   99-block 106
call   113 never executed
    %%%%%:   99-block 107
call   114 never executed
    %%%%%:   99-block 108
call   115 never executed
    $$$$$:   99-block 109
call   116 never executed
    $$$$$:   99-block 110
call   117 never executed
    %%%%%:   99-block 111
call   118 never executed
    $$$$$:   99-block 112
call   119 never executed
    %%%%%:   99-block 113
call   120 never executed
    $$$$$:   99-block 114
call   121 never executed
    %%%%%:   99-block 115
call   122 never executed
    $$$$$:   99-block 116
call   123 never executed
    %%%%%:   99-block 117
call   124 never executed
    $$$$$:   99-block 118
call   125 never executed
    %%%%%:   99-block 119
call   126 never executed
    %%%%%:   99-block 120
call   127 never executed
    $$$$$:   99-block 121
call   128 never executed
    %%%%%:   99-block 122
call   129 never executed
    $$$$$:   99-block 123
call   130 never executed
    %%%%%:   99-block 124
call   131 never executed
    $$$$$:   99-block 125
call   132 never executed
    %%%%%:   99-block 126
call   133 never executed
    %%%%%:   99-block 127
call   134 never executed
    $$$$$:   99-block 128
call   135 never executed
    $$$$$:   99-block 129
call   136 never executed
    %%%%%:   99-block 130
call   137 never executed
    %%%%%:   99-block 131
call   138 never executed
    $$$$$:   99-block 132
call   139 never executed
    $$$$$:   99-block 133
call   140 never executed
       21:   99-block 134
call   141 returned 21
       21:   99-block 135
call   142 returned 21
    $$$$$:   99-block 136
call   143 never executed
    $$$$$:   99-block 137
call   144 never executed
    %%%%%:   99-block 138
call   145 never executed
    %%%%%:   99-block 139
call   146 never executed
    %%%%%:   99-block 140
call   147 never executed
    %%%%%:   99-block 141
call   148 never executed
    %%%%%:   99-block 142
call   149 never executed
    %%%%%:   99-block 143
call   150 never executed
    %%%%%:   99-block 144
call   151 never executed
    $$$$$:   99-block 145
call   152 never executed
    $$$$$:   99-block 146
call   153 never executed
    $$$$$:   99-block 147
call   154 never executed
    $$$$$:   99-block 148
call   155 never executed
    $$$$$:   99-block 149
call   156 never executed
    $$$$$:   99-block 150
call   157 never executed
    $$$$$:   99-block 151
call   158 never executed
    %%%%%:   99-block 152
call   159 never executed
    $$$$$:   99-block 153
call   160 never executed
    %%%%%:   99-block 154
call   161 never executed
    %%%%%:   99-block 155
call   162 never executed
    $$$$$:   99-block 156
call   163 never executed
    %%%%%:   99-block 157
call   164 never executed
    $$$$$:   99-block 158
call   165 never executed
    %%%%%:   99-block 159
call   166 never executed
    $$$$$:   99-block 160
call   167 never executed
    $$$$$:   99-block 161
call   168 never executed
      69*:  100:      }
        -:  101:    };
        -:  102:
        -:  103:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  104:  // DR 740 - omit specialization for array objects with a compile time length
        -:  105:
        -:  106:  /** Specialization of default_delete for arrays, used by `unique_ptr<T[]>`
        -:  107:   *
        -:  108:   * @headerfile memory
        -:  109:   * @since C++11
        -:  110:   */
        -:  111:  template<typename _Tp>
        -:  112:    struct default_delete<_Tp[]>
        -:  113:    {
        -:  114:    public:
        -:  115:      /// Default constructor
        -:  116:      constexpr default_delete() noexcept = default;
        -:  117:
        -:  118:      /** @brief Converting constructor.
        -:  119:       *
        -:  120:       * Allows conversion from a deleter for arrays of another type, such as
        -:  121:       * a const-qualified version of `_Tp`.
        -:  122:       *
        -:  123:       * Conversions from types derived from `_Tp` are not allowed because
        -:  124:       * it is undefined to `delete[]` an array of derived types through a
        -:  125:       * pointer to the base type.
        -:  126:       */
        -:  127:      template<typename _Up,
        -:  128:	       typename = _Require<is_convertible<_Up(*)[], _Tp(*)[]>>>
        -:  129:	_GLIBCXX23_CONSTEXPR
        -:  130:        default_delete(const default_delete<_Up[]>&) noexcept { }
        -:  131:
        -:  132:      /// Calls `delete[] __ptr`
        -:  133:      template<typename _Up>
        -:  134:	_GLIBCXX23_CONSTEXPR
        -:  135:	typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
        -:  136:	operator()(_Up* __ptr) const
        -:  137:	{
        -:  138:	  static_assert(sizeof(_Tp)>0,
        -:  139:			"can't delete pointer to incomplete type");
        -:  140:	  delete [] __ptr;
        -:  141:	}
        -:  142:    };
        -:  143:
        -:  144:  /// @cond undocumented
        -:  145:
        -:  146:  // Manages the pointer and deleter of a unique_ptr
        -:  147:  template <typename _Tp, typename _Dp>
        -:  148:    class __uniq_ptr_impl
        -:  149:    {
        -:  150:      template <typename _Up, typename _Ep, typename = void>
        -:  151:	struct _Ptr
        -:  152:	{
        -:  153:	  using type = _Up*;
        -:  154:	};
        -:  155:
        -:  156:      template <typename _Up, typename _Ep>
        -:  157:	struct
        -:  158:	_Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
        -:  159:	{
        -:  160:	  using type = typename remove_reference<_Ep>::type::pointer;
        -:  161:	};
        -:  162:
        -:  163:    public:
        -:  164:      using _DeleterConstraint = enable_if<
        -:  165:        __and_<__not_<is_pointer<_Dp>>,
        -:  166:	       is_default_constructible<_Dp>>::value>;
        -:  167:
        -:  168:      using pointer = typename _Ptr<_Tp, _Dp>::type;
        -:  169:
        -:  170:      static_assert( !is_rvalue_reference<_Dp>::value,
        -:  171:		     "unique_ptr's deleter type must be a function object type"
        -:  172:		     " or an lvalue reference type" );
        -:  173:
        -:  174:      __uniq_ptr_impl() = default;
        -:  175:      _GLIBCXX23_CONSTEXPR
      79*:  176:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
        1:  176-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  176-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  176-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        4:  176-block  3
call    9 returned 4
branch 10 taken 4 (fallthrough)
branch 11 taken 0 (throw)
        4:  176-block  4
branch 12 taken 0 (fallthrough)
branch 13 taken 4
        4:  176-block  5
call   14 returned 4
        4:  176-block  6
       65:  176-block  7
    %%%%%:  176-block  8
branch 15 never executed (fallthrough)
branch 16 never executed
call   17 never executed
    %%%%%:  176-block  9
    %%%%%:  176-block 10
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
        -:  177:
        -:  178:      template<typename _Del>
        -:  179:	_GLIBCXX23_CONSTEXPR
        -:  180:	__uniq_ptr_impl(pointer __p, _Del&& __d)
        -:  181:	: _M_t(__p, std::forward<_Del>(__d)) { }
        -:  182:
        -:  183:      _GLIBCXX23_CONSTEXPR
        -:  184:      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
        -:  185:      : _M_t(std::move(__u._M_t))
        -:  186:      { __u._M_ptr() = nullptr; }
        -:  187:
        -:  188:      _GLIBCXX23_CONSTEXPR
        -:  189:      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
        -:  190:      {
    #####:  191:	reset(__u.release());
        -:  192:	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
        -:  193:	return *this;
        -:  194:      }
        -:  195:
        -:  196:      _GLIBCXX23_CONSTEXPR
        -:  197:      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
        -:  198:      _GLIBCXX23_CONSTEXPR
     532*:  199:      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
    %%%%%:  199-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  199-block  1
call    2 never executed
    %%%%%:  199-block  2
call    3 never executed
    %%%%%:  199-block  3
call    4 never executed
        1:  199-block  4
call    5 returned 1
    %%%%%:  199-block  5
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        1:  199-block  6
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
call   15 returned 9
branch 16 taken 9 (fallthrough)
branch 17 taken 0 (throw)
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
call   27 never executed
branch 28 never executed (fallthrough)
branch 29 never executed (throw)
call   30 never executed
branch 31 never executed (fallthrough)
branch 32 never executed (throw)
call   33 never executed
branch 34 never executed (fallthrough)
branch 35 never executed (throw)
call   36 never executed
branch 37 never executed (fallthrough)
branch 38 never executed (throw)
call   39 never executed
branch 40 never executed (fallthrough)
branch 41 never executed (throw)
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed (throw)
call   45 never executed
branch 46 never executed (fallthrough)
branch 47 never executed (throw)
call   48 never executed
branch 49 never executed (fallthrough)
branch 50 never executed (throw)
call   51 never executed
branch 52 never executed (fallthrough)
branch 53 never executed (throw)
call   54 never executed
branch 55 never executed (fallthrough)
branch 56 never executed (throw)
call   57 never executed
branch 58 never executed (fallthrough)
branch 59 never executed (throw)
call   60 never executed
branch 61 never executed (fallthrough)
branch 62 never executed (throw)
call   63 never executed
branch 64 never executed (fallthrough)
branch 65 never executed (throw)
call   66 never executed
branch 67 never executed (fallthrough)
branch 68 never executed (throw)
call   69 never executed
branch 70 never executed (fallthrough)
branch 71 never executed (throw)
call   72 never executed
branch 73 never executed (fallthrough)
branch 74 never executed (throw)
call   75 never executed
branch 76 never executed (fallthrough)
branch 77 never executed (throw)
call   78 never executed
branch 79 never executed (fallthrough)
branch 80 never executed (throw)
call   81 never executed
branch 82 never executed (fallthrough)
branch 83 never executed (throw)
call   84 returned 13
branch 85 taken 13 (fallthrough)
branch 86 taken 0 (throw)
call   87 never executed
branch 88 never executed (fallthrough)
branch 89 never executed (throw)
call   90 never executed
branch 91 never executed (fallthrough)
branch 92 never executed (throw)
    %%%%%:  199-block  7
call   93 never executed
       21:  199-block  8
call   94 returned 21
call   95 never executed
branch 96 never executed (fallthrough)
branch 97 never executed (throw)
branch 98 never executed (fallthrough)
branch 99 never executed
branch 100 never executed (fallthrough)
branch 101 never executed
branch 102 never executed (fallthrough)
branch 103 never executed
branch 104 never executed (fallthrough)
branch 105 never executed
call   106 never executed
branch 107 never executed (fallthrough)
branch 108 never executed (throw)
    %%%%%:  199-block  9
call   109 never executed
branch 110 never executed (fallthrough)
branch 111 never executed (throw)
    %%%%%:  199-block 10
call   112 never executed
branch 113 never executed (fallthrough)
branch 114 never executed (throw)
    %%%%%:  199-block 11
call   115 never executed
branch 116 never executed (fallthrough)
branch 117 never executed (throw)
    %%%%%:  199-block 12
call   118 never executed
branch 119 never executed (fallthrough)
branch 120 never executed (throw)
    %%%%%:  199-block 13
call   121 never executed
branch 122 never executed (fallthrough)
branch 123 never executed (throw)
    %%%%%:  199-block 14
call   124 never executed
branch 125 never executed (fallthrough)
branch 126 never executed (throw)
call   127 returned 1
branch 128 taken 0 (fallthrough)
branch 129 taken 1
    %%%%%:  199-block 15
branch 130 never executed (fallthrough)
branch 131 never executed
call   132 never executed
branch 133 never executed (fallthrough)
branch 134 never executed (throw)
    %%%%%:  199-block 16
call   135 never executed
branch 136 never executed (fallthrough)
branch 137 never executed (throw)
    %%%%%:  199-block 17
call   138 never executed
branch 139 never executed (fallthrough)
branch 140 never executed (throw)
    %%%%%:  199-block 18
call   141 never executed
branch 142 never executed (fallthrough)
branch 143 never executed (throw)
    %%%%%:  199-block 19
call   144 never executed
branch 145 never executed (fallthrough)
branch 146 never executed (throw)
    %%%%%:  199-block 20
call   147 never executed
branch 148 never executed (fallthrough)
branch 149 never executed (throw)
    %%%%%:  199-block 21
call   150 never executed
branch 151 never executed (fallthrough)
branch 152 never executed (throw)
branch 153 never executed (fallthrough)
branch 154 never executed
    %%%%%:  199-block 22
branch 155 never executed (fallthrough)
branch 156 never executed
    %%%%%:  199-block 23
call   157 never executed
branch 158 never executed (fallthrough)
branch 159 never executed (throw)
    %%%%%:  199-block 24
call   160 never executed
branch 161 never executed (fallthrough)
branch 162 never executed (throw)
    %%%%%:  199-block 25
call   163 never executed
branch 164 never executed (fallthrough)
branch 165 never executed (throw)
    %%%%%:  199-block 26
call   166 never executed
branch 167 never executed (fallthrough)
branch 168 never executed (throw)
    %%%%%:  199-block 27
call   169 never executed
branch 170 never executed (fallthrough)
branch 171 never executed (throw)
    %%%%%:  199-block 28
call   172 never executed
branch 173 never executed (fallthrough)
branch 174 never executed (throw)
    %%%%%:  199-block 29
call   175 never executed
branch 176 never executed (fallthrough)
branch 177 never executed (throw)
    %%%%%:  199-block 30
call   178 never executed
branch 179 never executed (fallthrough)
branch 180 never executed (throw)
    %%%%%:  199-block 31
call   181 never executed
branch 182 never executed (fallthrough)
branch 183 never executed (throw)
    %%%%%:  199-block 32
call   184 never executed
branch 185 never executed (fallthrough)
branch 186 never executed (throw)
    %%%%%:  199-block 33
call   187 never executed
branch 188 never executed (fallthrough)
branch 189 never executed (throw)
    %%%%%:  199-block 34
call   190 never executed
branch 191 never executed (fallthrough)
branch 192 never executed (throw)
    %%%%%:  199-block 35
call   193 never executed
branch 194 never executed (fallthrough)
branch 195 never executed (throw)
    %%%%%:  199-block 36
call   196 never executed
branch 197 never executed (fallthrough)
branch 198 never executed (throw)
    %%%%%:  199-block 37
call   199 never executed
branch 200 never executed (fallthrough)
branch 201 never executed (throw)
branch 202 never executed (fallthrough)
branch 203 never executed
    %%%%%:  199-block 38
branch 204 never executed (fallthrough)
branch 205 never executed
    %%%%%:  199-block 39
call   206 never executed
branch 207 never executed (fallthrough)
branch 208 never executed (throw)
    %%%%%:  199-block 40
call   209 never executed
branch 210 never executed (fallthrough)
branch 211 never executed (throw)
    %%%%%:  199-block 41
call   212 never executed
branch 213 never executed (fallthrough)
branch 214 never executed (throw)
    %%%%%:  199-block 42
call   215 never executed
branch 216 never executed (fallthrough)
branch 217 never executed (throw)
    %%%%%:  199-block 43
call   218 never executed
branch 219 never executed (fallthrough)
branch 220 never executed (throw)
    %%%%%:  199-block 44
call   221 never executed
branch 222 never executed (fallthrough)
branch 223 never executed (throw)
    %%%%%:  199-block 45
call   224 never executed
branch 225 never executed (fallthrough)
branch 226 never executed (throw)
    %%%%%:  199-block 46
call   227 never executed
branch 228 never executed (fallthrough)
branch 229 never executed (throw)
    %%%%%:  199-block 47
call   230 never executed
branch 231 never executed (fallthrough)
branch 232 never executed (throw)
    %%%%%:  199-block 48
call   233 never executed
branch 234 never executed (fallthrough)
branch 235 never executed (throw)
        4:  199-block 49
branch 236 taken 0 (fallthrough)
branch 237 taken 4
    %%%%%:  199-block 50
branch 238 never executed (fallthrough)
branch 239 never executed
    %%%%%:  199-block 51
branch 240 never executed (fallthrough)
branch 241 never executed
    %%%%%:  199-block 52
call   242 never executed
branch 243 never executed (fallthrough)
branch 244 never executed (throw)
    %%%%%:  199-block 53
call   245 never executed
branch 246 never executed (fallthrough)
branch 247 never executed (throw)
call   248 never executed
branch 249 never executed (fallthrough)
branch 250 never executed (throw)
    %%%%%:  199-block 54
call   251 never executed
branch 252 never executed (fallthrough)
branch 253 never executed (throw)
    %%%%%:  199-block 55
call   254 never executed
branch 255 never executed (fallthrough)
branch 256 never executed (throw)
    %%%%%:  199-block 56
call   257 never executed
branch 258 never executed (fallthrough)
branch 259 never executed (throw)
    %%%%%:  199-block 57
call   260 never executed
branch 261 never executed (fallthrough)
branch 262 never executed (throw)
    %%%%%:  199-block 58
call   263 never executed
branch 264 never executed (fallthrough)
branch 265 never executed (throw)
    %%%%%:  199-block 59
call   266 never executed
branch 267 never executed (fallthrough)
branch 268 never executed (throw)
    %%%%%:  199-block 60
call   269 never executed
branch 270 never executed (fallthrough)
branch 271 never executed (throw)
    %%%%%:  199-block 61
call   272 never executed
branch 273 never executed (fallthrough)
branch 274 never executed (throw)
    %%%%%:  199-block 62
call   275 never executed
branch 276 never executed (fallthrough)
branch 277 never executed (throw)
    %%%%%:  199-block 63
call   278 never executed
branch 279 never executed (fallthrough)
branch 280 never executed (throw)
    %%%%%:  199-block 64
call   281 never executed
branch 282 never executed (fallthrough)
branch 283 never executed (throw)
    %%%%%:  199-block 65
call   284 never executed
branch 285 never executed (fallthrough)
branch 286 never executed (throw)
    %%%%%:  199-block 66
call   287 never executed
branch 288 never executed (fallthrough)
branch 289 never executed (throw)
    %%%%%:  199-block 67
call   290 never executed
branch 291 never executed (fallthrough)
branch 292 never executed (throw)
call   293 never executed
branch 294 never executed (fallthrough)
branch 295 never executed (throw)
    %%%%%:  199-block 68
call   296 never executed
branch 297 never executed (fallthrough)
branch 298 never executed (throw)
    %%%%%:  199-block 69
call   299 never executed
branch 300 never executed (fallthrough)
branch 301 never executed (throw)
    %%%%%:  199-block 70
call   302 never executed
branch 303 never executed (fallthrough)
branch 304 never executed (throw)
    %%%%%:  199-block 71
call   305 never executed
branch 306 never executed (fallthrough)
branch 307 never executed (throw)
    %%%%%:  199-block 72
call   308 never executed
branch 309 never executed (fallthrough)
branch 310 never executed (throw)
    %%%%%:  199-block 73
call   311 never executed
branch 312 never executed (fallthrough)
branch 313 never executed (throw)
    %%%%%:  199-block 74
call   314 never executed
branch 315 never executed (fallthrough)
branch 316 never executed (throw)
call   317 never executed
branch 318 never executed (fallthrough)
branch 319 never executed (throw)
    %%%%%:  199-block 75
call   320 never executed
branch 321 never executed (fallthrough)
branch 322 never executed (throw)
    %%%%%:  199-block 76
call   323 never executed
branch 324 never executed (fallthrough)
branch 325 never executed (throw)
    %%%%%:  199-block 77
call   326 never executed
branch 327 never executed (fallthrough)
branch 328 never executed (throw)
    %%%%%:  199-block 78
call   329 never executed
branch 330 never executed (fallthrough)
branch 331 never executed (throw)
    %%%%%:  199-block 79
call   332 never executed
branch 333 never executed (fallthrough)
branch 334 never executed (throw)
    %%%%%:  199-block 80
call   335 never executed
branch 336 never executed (fallthrough)
branch 337 never executed (throw)
    %%%%%:  199-block 81
call   338 never executed
branch 339 never executed (fallthrough)
branch 340 never executed (throw)
    %%%%%:  199-block 82
call   341 never executed
branch 342 never executed (fallthrough)
branch 343 never executed (throw)
call   344 never executed
branch 345 never executed (fallthrough)
branch 346 never executed (throw)
    %%%%%:  199-block 83
call   347 never executed
branch 348 never executed (fallthrough)
branch 349 never executed (throw)
    %%%%%:  199-block 84
call   350 never executed
branch 351 never executed (fallthrough)
branch 352 never executed (throw)
    %%%%%:  199-block 85
call   353 never executed
branch 354 never executed (fallthrough)
branch 355 never executed (throw)
    %%%%%:  199-block 86
call   356 never executed
branch 357 never executed (fallthrough)
branch 358 never executed (throw)
    %%%%%:  199-block 87
call   359 never executed
    %%%%%:  199-block 88
branch 360 never executed (fallthrough)
branch 361 never executed
call   362 never executed
branch 363 never executed (fallthrough)
branch 364 never executed (throw)
    %%%%%:  199-block 89
call   365 never executed
branch 366 never executed (fallthrough)
branch 367 never executed (throw)
    %%%%%:  199-block 90
call   368 never executed
branch 369 never executed (fallthrough)
branch 370 never executed (throw)
call   371 never executed
branch 372 never executed (fallthrough)
branch 373 never executed (throw)
    %%%%%:  199-block 91
call   374 never executed
call   375 never executed
branch 376 never executed (fallthrough)
branch 377 never executed (throw)
call   378 never executed
branch 379 never executed (fallthrough)
branch 380 never executed (throw)
call   381 never executed
branch 382 never executed (fallthrough)
branch 383 never executed (throw)
    %%%%%:  199-block 92
call   384 never executed
branch 385 never executed (fallthrough)
branch 386 never executed
    %%%%%:  199-block 93
call   387 never executed
branch 388 never executed (fallthrough)
branch 389 never executed (throw)
call   390 never executed
branch 391 never executed (fallthrough)
branch 392 never executed (throw)
    %%%%%:  199-block 94
call   393 never executed
branch 394 never executed (fallthrough)
branch 395 never executed (throw)
    %%%%%:  199-block 95
call   396 never executed
branch 397 never executed (fallthrough)
branch 398 never executed (throw)
    %%%%%:  199-block 96
call   399 never executed
branch 400 never executed (fallthrough)
branch 401 never executed (throw)
    %%%%%:  199-block 97
call   402 never executed
branch 403 never executed (fallthrough)
branch 404 never executed (throw)
    %%%%%:  199-block 98
call   405 never executed
branch 406 never executed (fallthrough)
branch 407 never executed (throw)
    %%%%%:  199-block 99
call   408 never executed
branch 409 never executed (fallthrough)
branch 410 never executed (throw)
call   411 never executed
branch 412 never executed (fallthrough)
branch 413 never executed (throw)
    %%%%%:  199-block 100
call   414 never executed
branch 415 never executed (fallthrough)
branch 416 never executed (throw)
call   417 never executed
branch 418 never executed (fallthrough)
branch 419 never executed (throw)
    %%%%%:  199-block 101
call   420 never executed
branch 421 never executed (fallthrough)
branch 422 never executed (throw)
call   423 returned 21
branch 424 taken 21 (fallthrough)
branch 425 taken 0 (throw)
       21:  199-block 102
call   426 returned 21
branch 427 taken 21 (fallthrough)
branch 428 taken 0 (throw)
      414:  199-block 103
call   429 returned 414
branch 430 taken 414 (fallthrough)
branch 431 taken 0 (throw)
       21:  199-block 104
call   432 returned 21
branch 433 taken 21 (fallthrough)
branch 434 taken 0 (throw)
call   435 never executed
branch 436 never executed (fallthrough)
branch 437 never executed (throw)
    %%%%%:  199-block 105
call   438 never executed
branch 439 never executed (fallthrough)
branch 440 never executed (throw)
    %%%%%:  199-block 106
call   441 never executed
branch 442 never executed (fallthrough)
branch 443 never executed (throw)
    %%%%%:  199-block 107
call   444 never executed
branch 445 never executed (fallthrough)
branch 446 never executed (throw)
    %%%%%:  199-block 108
call   447 never executed
branch 448 never executed (fallthrough)
branch 449 never executed (throw)
    %%%%%:  199-block 109
call   450 never executed
branch 451 never executed (fallthrough)
branch 452 never executed (throw)
    %%%%%:  199-block 110
call   453 never executed
branch 454 never executed (fallthrough)
branch 455 never executed (throw)
call   456 never executed
branch 457 never executed (fallthrough)
branch 458 never executed (throw)
    %%%%%:  199-block 111
call   459 never executed
branch 460 never executed (fallthrough)
branch 461 never executed (throw)
    %%%%%:  199-block 112
call   462 never executed
branch 463 never executed (fallthrough)
branch 464 never executed (throw)
    %%%%%:  199-block 113
call   465 never executed
branch 466 never executed (fallthrough)
branch 467 never executed (throw)
branch 468 never executed (fallthrough)
branch 469 never executed
branch 470 never executed (fallthrough)
branch 471 never executed
    %%%%%:  199-block 114
call   472 never executed
branch 473 never executed (fallthrough)
branch 474 never executed (throw)
    %%%%%:  199-block 115
call   475 never executed
branch 476 never executed (fallthrough)
branch 477 never executed (throw)
call   478 never executed
branch 479 never executed (fallthrough)
branch 480 never executed (throw)
    %%%%%:  199-block 116
call   481 never executed
branch 482 never executed (fallthrough)
branch 483 never executed (throw)
    %%%%%:  199-block 117
call   484 never executed
branch 485 never executed (fallthrough)
branch 486 never executed (throw)
branch 487 never executed (fallthrough)
branch 488 never executed
call   489 never executed
branch 490 never executed (fallthrough)
branch 491 never executed (throw)
        4:  199-block 118
branch 492 taken 0 (fallthrough)
branch 493 taken 4
    %%%%%:  199-block 119
branch 494 never executed (fallthrough)
branch 495 never executed
    %%%%%:  199-block 120
branch 496 never executed (fallthrough)
branch 497 never executed
    %%%%%:  199-block 121
call   498 never executed
branch 499 never executed (fallthrough)
branch 500 never executed (throw)
    %%%%%:  199-block 122
branch 501 never executed (fallthrough)
branch 502 never executed
    %%%%%:  199-block 123
call   503 never executed
    %%%%%:  199-block 124
call   504 never executed
    %%%%%:  199-block 125
call   505 never executed
branch 506 never executed (fallthrough)
branch 507 never executed (throw)
        -:  200:      _GLIBCXX23_CONSTEXPR
        -:  201:      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
        -:  202:      _GLIBCXX23_CONSTEXPR
        -:  203:      const _Dp& _M_deleter() const noexcept { return std::get<1>(_M_t); }
        -:  204:
        -:  205:      _GLIBCXX23_CONSTEXPR
       1*:  206:      void reset(pointer __p) noexcept
        -:  207:      {
       1*:  208:	const pointer __old_p = _M_ptr();
       1*:  209:	_M_ptr() = __p;
       1*:  210:	if (__old_p)
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  210-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  211:	  _M_deleter()(__old_p);
       1*:  212:      }
------------------
_ZNSt15__uniq_ptr_implIN7testing8internal24InternalRunDeathTestFlagESt14default_deleteIS2_EE5resetEPS2_:
function _ZNSt15__uniq_ptr_implIN7testing8internal24InternalRunDeathTestFlagESt14default_deleteIS2_EE5resetEPS2_ called 1 returned 100% blocks executed 40%
        1:  206:      void reset(pointer __p) noexcept
        -:  207:      {
        1:  208:	const pointer __old_p = _M_ptr();
        1:  209:	_M_ptr() = __p;
        1:  210:	if (__old_p)
        1:  210-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  211:	  _M_deleter()(__old_p);
        1:  212:      }
------------------
_ZNSt15__uniq_ptr_implINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE5resetEPS5_:
function _ZNSt15__uniq_ptr_implINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE5resetEPS5_ called 0 returned 0% blocks executed 0%
    #####:  206:      void reset(pointer __p) noexcept
        -:  207:      {
    #####:  208:	const pointer __old_p = _M_ptr();
    #####:  209:	_M_ptr() = __p;
    #####:  210:	if (__old_p)
    %%%%%:  210-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  211:	  _M_deleter()(__old_p);
    #####:  212:      }
------------------
        -:  213:
        -:  214:      _GLIBCXX23_CONSTEXPR
        -:  215:      pointer release() noexcept
        -:  216:      {
        -:  217:	pointer __p = _M_ptr();
    #####:  218:	_M_ptr() = nullptr;
        -:  219:	return __p;
        -:  220:      }
        -:  221:
        -:  222:      _GLIBCXX23_CONSTEXPR
        -:  223:      void
        -:  224:      swap(__uniq_ptr_impl& __rhs) noexcept
        -:  225:      {
        -:  226:	using std::swap;
        -:  227:	swap(this->_M_ptr(), __rhs._M_ptr());
        -:  228:	swap(this->_M_deleter(), __rhs._M_deleter());
        -:  229:      }
        -:  230:
        -:  231:    private:
        -:  232:      tuple<pointer, _Dp> _M_t;
        -:  233:    };
        -:  234:
        -:  235:  // Defines move construction + assignment as either defaulted or deleted.
        -:  236:  template <typename _Tp, typename _Dp,
        -:  237:	    bool = is_move_constructible<_Dp>::value,
        -:  238:	    bool = is_move_assignable<_Dp>::value>
        -:  239:    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
        -:  240:    {
        -:  241:      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
        -:  242:      __uniq_ptr_data(__uniq_ptr_data&&) = default;
    #####:  243:      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
call    0 never executed
        -:  244:    };
        -:  245:
        -:  246:  template <typename _Tp, typename _Dp>
        -:  247:    struct __uniq_ptr_data<_Tp, _Dp, true, false> : __uniq_ptr_impl<_Tp, _Dp>
        -:  248:    {
        -:  249:      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
        -:  250:      __uniq_ptr_data(__uniq_ptr_data&&) = default;
        -:  251:      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
        -:  252:    };
        -:  253:
        -:  254:  template <typename _Tp, typename _Dp>
        -:  255:    struct __uniq_ptr_data<_Tp, _Dp, false, true> : __uniq_ptr_impl<_Tp, _Dp>
        -:  256:    {
        -:  257:      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
        -:  258:      __uniq_ptr_data(__uniq_ptr_data&&) = delete;
        -:  259:      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
        -:  260:    };
        -:  261:
        -:  262:  template <typename _Tp, typename _Dp>
        -:  263:    struct __uniq_ptr_data<_Tp, _Dp, false, false> : __uniq_ptr_impl<_Tp, _Dp>
        -:  264:    {
        -:  265:      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
        -:  266:      __uniq_ptr_data(__uniq_ptr_data&&) = delete;
        -:  267:      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
        -:  268:    };
        -:  269:  /// @endcond
        -:  270:
        -:  271:  // 20.7.1.2 unique_ptr for single objects.
        -:  272:
        -:  273:  /// A move-only smart pointer that manages unique ownership of a resource.
        -:  274:  /// @headerfile memory
        -:  275:  /// @since C++11
        -:  276:  template <typename _Tp, typename _Dp = default_delete<_Tp>>
        -:  277:    class unique_ptr
        -:  278:    {
        -:  279:      template <typename _Up>
        -:  280:	using _DeleterConstraint =
        -:  281:	  typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;
        -:  282:
        -:  283:      __uniq_ptr_data<_Tp, _Dp> _M_t;
        -:  284:
        -:  285:    public:
        -:  286:      using pointer	  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
        -:  287:      using element_type  = _Tp;
        -:  288:      using deleter_type  = _Dp;
        -:  289:
        -:  290:    private:
        -:  291:      // helper template for detecting a safe conversion from another
        -:  292:      // unique_ptr
        -:  293:      template<typename _Up, typename _Ep>
        -:  294:	using __safe_conversion_up = __and_<
        -:  295:	  is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
        -:  296:	  __not_<is_array<_Up>>
        -:  297:        >;
        -:  298:
        -:  299:    public:
        -:  300:      // Constructors.
        -:  301:
        -:  302:      /// Default constructor, creates a unique_ptr that owns nothing.
        -:  303:      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
        -:  304:	constexpr unique_ptr() noexcept
        -:  305:	: _M_t()
        -:  306:	{ }
        -:  307:
        -:  308:      /** Takes ownership of a pointer.
        -:  309:       *
        -:  310:       * @param __p  A pointer to an object of @c element_type
        -:  311:       *
        -:  312:       * The deleter will be value-initialized.
        -:  313:       */
        -:  314:      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
        -:  315:	_GLIBCXX23_CONSTEXPR
        -:  316:	explicit
        -:  317:	unique_ptr(pointer __p) noexcept
        -:  318:	: _M_t(__p)
        -:  319:        { }
        -:  320:
        -:  321:      /** Takes ownership of a pointer.
        -:  322:       *
        -:  323:       * @param __p  A pointer to an object of @c element_type
        -:  324:       * @param __d  A reference to a deleter.
        -:  325:       *
        -:  326:       * The deleter will be initialized with @p __d
        -:  327:       */
        -:  328:      template<typename _Del = deleter_type,
        -:  329:	       typename = _Require<is_copy_constructible<_Del>>>
        -:  330:	_GLIBCXX23_CONSTEXPR
        -:  331:	unique_ptr(pointer __p, const deleter_type& __d) noexcept
        -:  332:	: _M_t(__p, __d) { }
        -:  333:
        -:  334:      /** Takes ownership of a pointer.
        -:  335:       *
        -:  336:       * @param __p  A pointer to an object of @c element_type
        -:  337:       * @param __d  An rvalue reference to a (non-reference) deleter.
        -:  338:       *
        -:  339:       * The deleter will be initialized with @p std::move(__d)
        -:  340:       */
        -:  341:      template<typename _Del = deleter_type,
        -:  342:	       typename = _Require<is_move_constructible<_Del>>>
        -:  343:	_GLIBCXX23_CONSTEXPR
        -:  344:	unique_ptr(pointer __p,
        -:  345:		   __enable_if_t<!is_lvalue_reference<_Del>::value,
        -:  346:				 _Del&&> __d) noexcept
        -:  347:	: _M_t(__p, std::move(__d))
        -:  348:	{ }
        -:  349:
        -:  350:      template<typename _Del = deleter_type,
        -:  351:	       typename _DelUnref = typename remove_reference<_Del>::type>
        -:  352:	_GLIBCXX23_CONSTEXPR
        -:  353:	unique_ptr(pointer,
        -:  354:		   __enable_if_t<is_lvalue_reference<_Del>::value,
        -:  355:				 _DelUnref&&>) = delete;
        -:  356:
        -:  357:      /// Creates a unique_ptr that owns nothing.
        -:  358:      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
        -:  359:	constexpr unique_ptr(nullptr_t) noexcept
        -:  360:	: _M_t()
        -:  361:	{ }
        -:  362:
        -:  363:      // Move constructors.
        -:  364:
        -:  365:      /// Move constructor.
        -:  366:      unique_ptr(unique_ptr&&) = default;
        -:  367:
        -:  368:      /** @brief Converting constructor from another type
        -:  369:       *
        -:  370:       * Requires that the pointer owned by @p __u is convertible to the
        -:  371:       * type of pointer owned by this object, @p __u does not own an array,
        -:  372:       * and @p __u has a compatible deleter type.
        -:  373:       */
        -:  374:      template<typename _Up, typename _Ep, typename = _Require<
        -:  375:               __safe_conversion_up<_Up, _Ep>,
        -:  376:	       __conditional_t<is_reference<_Dp>::value,
        -:  377:			       is_same<_Ep, _Dp>,
        -:  378:			       is_convertible<_Ep, _Dp>>>>
        -:  379:	_GLIBCXX23_CONSTEXPR
        -:  380:	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
        -:  381:	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
        -:  382:	{ }
        -:  383:
        -:  384:#if _GLIBCXX_USE_DEPRECATED
        -:  385:#pragma GCC diagnostic push
        -:  386:#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        -:  387:      /// Converting constructor from @c auto_ptr
        -:  388:      template<typename _Up, typename = _Require<
        -:  389:	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
        -:  390:	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
        -:  391:#pragma GCC diagnostic pop
        -:  392:#endif
        -:  393:
        -:  394:      /// Destructor, invokes the deleter if the stored pointer is not null.
        -:  395:#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
        -:  396:      constexpr
        -:  397:#endif
       4*:  398:      ~unique_ptr() noexcept
        -:  399:      {
        -:  400:	static_assert(__is_invocable<deleter_type&, pointer>::value,
        -:  401:		      "unique_ptr's deleter must be invocable with a pointer");
        -:  402:	auto& __ptr = _M_t._M_ptr();
      69*:  403:	if (__ptr != nullptr)
    %%%%%:  403-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  403-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  403-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$:  403-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
        1:  403-block  4
branch  8 taken 1 (fallthrough)
branch  9 taken 0
    $$$$$:  403-block  5
branch 10 never executed (fallthrough)
branch 11 never executed
    %%%%%:  403-block  6
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:  403-block  7
branch 14 never executed (fallthrough)
branch 15 never executed
    %%%%%:  403-block  8
branch 16 never executed (fallthrough)
branch 17 never executed
    $$$$$:  403-block  9
branch 18 never executed (fallthrough)
branch 19 never executed
    %%%%%:  403-block 10
branch 20 never executed (fallthrough)
branch 21 never executed
    $$$$$:  403-block 11
branch 22 never executed (fallthrough)
branch 23 never executed
    %%%%%:  403-block 12
branch 24 never executed (fallthrough)
branch 25 never executed
branch 26 never executed (fallthrough)
branch 27 never executed
branch 28 never executed (fallthrough)
branch 29 never executed
        9:  403-block 13
branch 30 taken 9 (fallthrough)
branch 31 taken 0
    $$$$$:  403-block 14
branch 32 never executed (fallthrough)
branch 33 never executed
    %%%%%:  403-block 15
branch 34 never executed (fallthrough)
branch 35 never executed
    $$$$$:  403-block 16
branch 36 never executed (fallthrough)
branch 37 never executed
    %%%%%:  403-block 17
branch 38 never executed (fallthrough)
branch 39 never executed
    $$$$$:  403-block 18
branch 40 never executed (fallthrough)
branch 41 never executed
    %%%%%:  403-block 19
branch 42 never executed (fallthrough)
branch 43 never executed
    $$$$$:  403-block 20
branch 44 never executed (fallthrough)
branch 45 never executed
    %%%%%:  403-block 21
branch 46 never executed (fallthrough)
branch 47 never executed
    $$$$$:  403-block 22
branch 48 never executed (fallthrough)
branch 49 never executed
    %%%%%:  403-block 23
branch 50 never executed (fallthrough)
branch 51 never executed
    $$$$$:  403-block 24
branch 52 never executed (fallthrough)
branch 53 never executed
    %%%%%:  403-block 25
branch 54 never executed (fallthrough)
branch 55 never executed
    $$$$$:  403-block 26
branch 56 never executed (fallthrough)
branch 57 never executed
    %%%%%:  403-block 27
branch 58 never executed (fallthrough)
branch 59 never executed
    $$$$$:  403-block 28
branch 60 never executed (fallthrough)
branch 61 never executed
    %%%%%:  403-block 29
branch 62 never executed (fallthrough)
branch 63 never executed
    $$$$$:  403-block 30
branch 64 never executed (fallthrough)
branch 65 never executed
    %%%%%:  403-block 31
branch 66 never executed (fallthrough)
branch 67 never executed
    $$$$$:  403-block 32
branch 68 never executed (fallthrough)
branch 69 never executed
    %%%%%:  403-block 33
branch 70 never executed (fallthrough)
branch 71 never executed
    $$$$$:  403-block 34
branch 72 never executed (fallthrough)
branch 73 never executed
    %%%%%:  403-block 35
branch 74 never executed (fallthrough)
branch 75 never executed
    $$$$$:  403-block 36
branch 76 never executed (fallthrough)
branch 77 never executed
    %%%%%:  403-block 37
branch 78 never executed (fallthrough)
branch 79 never executed
    $$$$$:  403-block 38
branch 80 never executed (fallthrough)
branch 81 never executed
    %%%%%:  403-block 39
branch 82 never executed (fallthrough)
branch 83 never executed
    $$$$$:  403-block 40
branch 84 never executed (fallthrough)
branch 85 never executed
    %%%%%:  403-block 41
branch 86 never executed (fallthrough)
branch 87 never executed
    $$$$$:  403-block 42
branch 88 never executed (fallthrough)
branch 89 never executed
    %%%%%:  403-block 43
branch 90 never executed (fallthrough)
branch 91 never executed
    $$$$$:  403-block 44
branch 92 never executed (fallthrough)
branch 93 never executed
    %%%%%:  403-block 45
branch 94 never executed (fallthrough)
branch 95 never executed
    $$$$$:  403-block 46
branch 96 never executed (fallthrough)
branch 97 never executed
    %%%%%:  403-block 47
branch 98 never executed (fallthrough)
branch 99 never executed
    $$$$$:  403-block 48
branch 100 never executed (fallthrough)
branch 101 never executed
    %%%%%:  403-block 49
branch 102 never executed (fallthrough)
branch 103 never executed
    $$$$$:  403-block 50
branch 104 never executed (fallthrough)
branch 105 never executed
    %%%%%:  403-block 51
branch 106 never executed (fallthrough)
branch 107 never executed
    $$$$$:  403-block 52
branch 108 never executed (fallthrough)
branch 109 never executed
    %%%%%:  403-block 53
branch 110 never executed (fallthrough)
branch 111 never executed
    $$$$$:  403-block 54
branch 112 never executed (fallthrough)
branch 113 never executed
    %%%%%:  403-block 55
branch 114 never executed (fallthrough)
branch 115 never executed
    $$$$$:  403-block 56
branch 116 never executed (fallthrough)
branch 117 never executed
    %%%%%:  403-block 57
branch 118 never executed (fallthrough)
branch 119 never executed
    $$$$$:  403-block 58
branch 120 never executed (fallthrough)
branch 121 never executed
    %%%%%:  403-block 59
branch 122 never executed (fallthrough)
branch 123 never executed
    $$$$$:  403-block 60
branch 124 never executed (fallthrough)
branch 125 never executed
       13:  403-block 61
branch 126 taken 13 (fallthrough)
branch 127 taken 0
    $$$$$:  403-block 62
branch 128 never executed (fallthrough)
branch 129 never executed
    %%%%%:  403-block 63
branch 130 never executed (fallthrough)
branch 131 never executed
    $$$$$:  403-block 64
branch 132 never executed (fallthrough)
branch 133 never executed
    %%%%%:  403-block 65
branch 134 never executed (fallthrough)
branch 135 never executed
    $$$$$:  403-block 66
branch 136 never executed (fallthrough)
branch 137 never executed
    %%%%%:  403-block 67
branch 138 never executed (fallthrough)
branch 139 never executed
    $$$$$:  403-block 68
branch 140 never executed (fallthrough)
branch 141 never executed
    %%%%%:  403-block 69
branch 142 never executed (fallthrough)
branch 143 never executed
    $$$$$:  403-block 70
branch 144 never executed (fallthrough)
branch 145 never executed
    %%%%%:  403-block 71
branch 146 never executed (fallthrough)
branch 147 never executed
    %%%%%:  403-block 72
branch 148 never executed (fallthrough)
branch 149 never executed
    %%%%%:  403-block 73
branch 150 never executed (fallthrough)
branch 151 never executed
    $$$$$:  403-block 74
branch 152 never executed (fallthrough)
branch 153 never executed
    $$$$$:  403-block 75
branch 154 never executed (fallthrough)
branch 155 never executed
    $$$$$:  403-block 76
branch 156 never executed (fallthrough)
branch 157 never executed
    $$$$$:  403-block 77
branch 158 never executed (fallthrough)
branch 159 never executed
    $$$$$:  403-block 78
branch 160 never executed (fallthrough)
branch 161 never executed
    $$$$$:  403-block 79
branch 162 never executed (fallthrough)
branch 163 never executed
branch 164 never executed (fallthrough)
branch 165 never executed
    $$$$$:  403-block 80
branch 166 never executed (fallthrough)
branch 167 never executed
branch 168 never executed (fallthrough)
branch 169 never executed
    $$$$$:  403-block 81
branch 170 never executed (fallthrough)
branch 171 never executed
    %%%%%:  403-block 82
branch 172 never executed (fallthrough)
branch 173 never executed
    $$$$$:  403-block 83
branch 174 never executed (fallthrough)
branch 175 never executed
    %%%%%:  403-block 84
branch 176 never executed (fallthrough)
branch 177 never executed
    $$$$$:  403-block 85
branch 178 never executed (fallthrough)
branch 179 never executed
    %%%%%:  403-block 86
branch 180 never executed (fallthrough)
branch 181 never executed
    $$$$$:  403-block 87
branch 182 never executed (fallthrough)
branch 183 never executed
    %%%%%:  403-block 88
branch 184 never executed (fallthrough)
branch 185 never executed
    $$$$$:  403-block 89
branch 186 never executed (fallthrough)
branch 187 never executed
branch 188 never executed (fallthrough)
branch 189 never executed
    $$$$$:  403-block 90
branch 190 never executed (fallthrough)
branch 191 never executed
branch 192 never executed (fallthrough)
branch 193 never executed
    $$$$$:  403-block 91
branch 194 never executed (fallthrough)
branch 195 never executed
    %%%%%:  403-block 92
branch 196 never executed (fallthrough)
branch 197 never executed
    $$$$$:  403-block 93
branch 198 never executed (fallthrough)
branch 199 never executed
branch 200 never executed (fallthrough)
branch 201 never executed
branch 202 never executed (fallthrough)
branch 203 never executed
    $$$$$:  403-block 94
branch 204 never executed (fallthrough)
branch 205 never executed
    $$$$$:  403-block 95
branch 206 never executed (fallthrough)
branch 207 never executed
branch 208 never executed (fallthrough)
branch 209 never executed
    $$$$$:  403-block 96
branch 210 never executed (fallthrough)
branch 211 never executed
    %%%%%:  403-block 97
branch 212 never executed (fallthrough)
branch 213 never executed
    $$$$$:  403-block 98
branch 214 never executed (fallthrough)
branch 215 never executed
    %%%%%:  403-block 99
branch 216 never executed (fallthrough)
branch 217 never executed
    $$$$$:  403-block 100
branch 218 never executed (fallthrough)
branch 219 never executed
branch 220 never executed (fallthrough)
branch 221 never executed
    $$$$$:  403-block 101
branch 222 never executed (fallthrough)
branch 223 never executed
branch 224 never executed (fallthrough)
branch 225 never executed
    %%%%%:  403-block 102
branch 226 never executed (fallthrough)
branch 227 never executed
    $$$$$:  403-block 103
branch 228 never executed (fallthrough)
branch 229 never executed
branch 230 never executed (fallthrough)
branch 231 never executed
    $$$$$:  403-block 104
branch 232 never executed (fallthrough)
branch 233 never executed
branch 234 never executed (fallthrough)
branch 235 never executed
    $$$$$:  403-block 105
branch 236 never executed (fallthrough)
branch 237 never executed
    %%%%%:  403-block 106
branch 238 never executed (fallthrough)
branch 239 never executed
branch 240 never executed (fallthrough)
branch 241 never executed
    $$$$$:  403-block 107
branch 242 never executed (fallthrough)
branch 243 never executed
    $$$$$:  403-block 108
branch 244 never executed (fallthrough)
branch 245 never executed
    %%%%%:  403-block 109
branch 246 never executed (fallthrough)
branch 247 never executed
    %%%%%:  403-block 110
branch 248 never executed (fallthrough)
branch 249 never executed
    $$$$$:  403-block 111
branch 250 never executed (fallthrough)
branch 251 never executed
    $$$$$:  403-block 112
branch 252 never executed (fallthrough)
branch 253 never executed
       21:  403-block 113
branch 254 taken 21 (fallthrough)
branch 255 taken 0
       21:  403-block 114
branch 256 taken 21 (fallthrough)
branch 257 taken 0
    $$$$$:  403-block 115
branch 258 never executed (fallthrough)
branch 259 never executed
    $$$$$:  403-block 116
branch 260 never executed (fallthrough)
branch 261 never executed
branch 262 never executed (fallthrough)
branch 263 never executed
branch 264 never executed (fallthrough)
branch 265 never executed
branch 266 never executed (fallthrough)
branch 267 never executed
branch 268 never executed (fallthrough)
branch 269 never executed
branch 270 never executed (fallthrough)
branch 271 never executed
branch 272 never executed (fallthrough)
branch 273 never executed
branch 274 never executed (fallthrough)
branch 275 never executed
    $$$$$:  403-block 117
branch 276 never executed (fallthrough)
branch 277 never executed
    $$$$$:  403-block 118
branch 278 never executed (fallthrough)
branch 279 never executed
    $$$$$:  403-block 119
branch 280 never executed (fallthrough)
branch 281 never executed
    $$$$$:  403-block 120
branch 282 never executed (fallthrough)
branch 283 never executed
    $$$$$:  403-block 121
branch 284 never executed (fallthrough)
branch 285 never executed
    $$$$$:  403-block 122
branch 286 never executed (fallthrough)
branch 287 never executed
    $$$$$:  403-block 123
branch 288 never executed (fallthrough)
branch 289 never executed
    %%%%%:  403-block 124
branch 290 never executed (fallthrough)
branch 291 never executed
    $$$$$:  403-block 125
branch 292 never executed (fallthrough)
branch 293 never executed
branch 294 never executed (fallthrough)
branch 295 never executed
branch 296 never executed (fallthrough)
branch 297 never executed
    $$$$$:  403-block 126
branch 298 never executed (fallthrough)
branch 299 never executed
    %%%%%:  403-block 127
branch 300 never executed (fallthrough)
branch 301 never executed
    $$$$$:  403-block 128
branch 302 never executed (fallthrough)
branch 303 never executed
    %%%%%:  403-block 129
branch 304 never executed (fallthrough)
branch 305 never executed
    $$$$$:  403-block 130
branch 306 never executed (fallthrough)
branch 307 never executed
    $$$$$:  403-block 131
branch 308 never executed (fallthrough)
branch 309 never executed
    #####:  404:	  get_deleter()(std::move(__ptr));
    %%%%%:  404-block  0
call    0 never executed
    $$$$$:  404-block  1
call    1 never executed
        -:  405:	__ptr = pointer();
       4*:  406:      }
    %%%%%:  406-block  0
call    0 never executed
    $$$$$:  406-block  1
------------------
_ZNSt10unique_ptrIN7testing8internal24InternalRunDeathTestFlagESt14default_deleteIS2_EED1Ev:
function _ZNSt10unique_ptrIN7testing8internal24InternalRunDeathTestFlagESt14default_deleteIS2_EED1Ev called 0 returned 0% blocks executed 0%
    #####:  398:      ~unique_ptr() noexcept
        -:  399:      {
        -:  400:	static_assert(__is_invocable<deleter_type&, pointer>::value,
        -:  401:		      "unique_ptr's deleter must be invocable with a pointer");
        -:  402:	auto& __ptr = _M_t._M_ptr();
    #####:  403:	if (__ptr != nullptr)
    %%%%%:  403-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  404:	  get_deleter()(std::move(__ptr));
        -:  405:	__ptr = pointer();
    #####:  406:      }
------------------
_ZNSt10unique_ptrIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS6_EED1Ev:
function _ZNSt10unique_ptrIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS6_EED1Ev called 0 returned 0% blocks executed 0%
    #####:  398:      ~unique_ptr() noexcept
        -:  399:      {
        -:  400:	static_assert(__is_invocable<deleter_type&, pointer>::value,
        -:  401:		      "unique_ptr's deleter must be invocable with a pointer");
        -:  402:	auto& __ptr = _M_t._M_ptr();
    #####:  403:	if (__ptr != nullptr)
    %%%%%:  403-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  404:	  get_deleter()(std::move(__ptr));
        -:  405:	__ptr = pointer();
    #####:  406:      }
------------------
_ZNSt10unique_ptrIN7testing8internal14GTestFlagSaverESt14default_deleteIS2_EED1Ev:
function _ZNSt10unique_ptrIN7testing8internal14GTestFlagSaverESt14default_deleteIS2_EED1Ev called 4 returned 100% blocks executed 100%
        4:  398:      ~unique_ptr() noexcept
        -:  399:      {
        -:  400:	static_assert(__is_invocable<deleter_type&, pointer>::value,
        -:  401:		      "unique_ptr's deleter must be invocable with a pointer");
        -:  402:	auto& __ptr = _M_t._M_ptr();
        4:  403:	if (__ptr != nullptr)
        4:  403-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -:  404:	  get_deleter()(std::move(__ptr));
        -:  405:	__ptr = pointer();
        4:  406:      }
------------------
_ZNSt10unique_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EED1Ev:
function _ZNSt10unique_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EED1Ev called 0 returned 0% blocks executed 0%
    #####:  398:      ~unique_ptr() noexcept
        -:  399:      {
        -:  400:	static_assert(__is_invocable<deleter_type&, pointer>::value,
        -:  401:		      "unique_ptr's deleter must be invocable with a pointer");
        -:  402:	auto& __ptr = _M_t._M_ptr();
    #####:  403:	if (__ptr != nullptr)
    %%%%%:  403-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  404:	  get_deleter()(std::move(__ptr));
        -:  405:	__ptr = pointer();
    #####:  406:      }
------------------
        -:  407:
        -:  408:      // Assignment.
        -:  409:
        -:  410:      /** @brief Move assignment operator.
        -:  411:       *
        -:  412:       * Invokes the deleter if this object owns a pointer.
        -:  413:       */
        -:  414:      unique_ptr& operator=(unique_ptr&&) = default;
        -:  415:
        -:  416:      /** @brief Assignment from another type.
        -:  417:       *
        -:  418:       * @param __u  The object to transfer ownership from, which owns a
        -:  419:       *             convertible pointer to a non-array object.
        -:  420:       *
        -:  421:       * Invokes the deleter if this object owns a pointer.
        -:  422:       */
        -:  423:      template<typename _Up, typename _Ep>
        -:  424:	_GLIBCXX23_CONSTEXPR
        -:  425:        typename enable_if< __and_<
        -:  426:          __safe_conversion_up<_Up, _Ep>,
        -:  427:          is_assignable<deleter_type&, _Ep&&>
        -:  428:          >::value,
        -:  429:          unique_ptr&>::type
        -:  430:	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
        -:  431:	{
        -:  432:	  reset(__u.release());
        -:  433:	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
        -:  434:	  return *this;
        -:  435:	}
        -:  436:
        -:  437:      /// Reset the %unique_ptr to empty, invoking the deleter if necessary.
        -:  438:      _GLIBCXX23_CONSTEXPR
        -:  439:      unique_ptr&
        -:  440:      operator=(nullptr_t) noexcept
        -:  441:      {
        -:  442:	reset();
        -:  443:	return *this;
        -:  444:      }
        -:  445:
        -:  446:      // Observers.
        -:  447:
        -:  448:      /// Dereference the stored pointer.
        -:  449:      _GLIBCXX23_CONSTEXPR
        -:  450:      typename add_lvalue_reference<element_type>::type
        -:  451:      operator*() const noexcept(noexcept(*std::declval<pointer>()))
        -:  452:      {
        -:  453:	__glibcxx_assert(get() != pointer());
        -:  454:	return *get();
        -:  455:      }
        -:  456:
        -:  457:      /// Return the stored pointer.
        -:  458:      _GLIBCXX23_CONSTEXPR
        -:  459:      pointer
        -:  460:      operator->() const noexcept
        -:  461:      {
        -:  462:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
        -:  463:	return get();
        -:  464:      }
        -:  465:
        -:  466:      /// Return the stored pointer.
        -:  467:      _GLIBCXX23_CONSTEXPR
        -:  468:      pointer
        -:  469:      get() const noexcept
        -:  470:      { return _M_t._M_ptr(); }
        -:  471:
        -:  472:      /// Return a reference to the stored deleter.
        -:  473:      _GLIBCXX23_CONSTEXPR
        -:  474:      deleter_type&
        -:  475:      get_deleter() noexcept
        -:  476:      { return _M_t._M_deleter(); }
        -:  477:
        -:  478:      /// Return a reference to the stored deleter.
        -:  479:      _GLIBCXX23_CONSTEXPR
        -:  480:      const deleter_type&
        -:  481:      get_deleter() const noexcept
        -:  482:      { return _M_t._M_deleter(); }
        -:  483:
        -:  484:      /// Return @c true if the stored pointer is not null.
        -:  485:      _GLIBCXX23_CONSTEXPR
        -:  486:      explicit operator bool() const noexcept
        -:  487:      { return get() == pointer() ? false : true; }
        -:  488:
        -:  489:      // Modifiers.
        -:  490:
        -:  491:      /// Release ownership of any stored pointer.
        -:  492:      _GLIBCXX23_CONSTEXPR
        -:  493:      pointer
        -:  494:      release() noexcept
        -:  495:      { return _M_t.release(); }
        -:  496:
        -:  497:      /** @brief Replace the stored pointer.
        -:  498:       *
        -:  499:       * @param __p  The new pointer to store.
        -:  500:       *
        -:  501:       * The deleter will be invoked if a pointer is already owned.
        -:  502:       */
        -:  503:      _GLIBCXX23_CONSTEXPR
        -:  504:      void
        -:  505:      reset(pointer __p = pointer()) noexcept
        -:  506:      {
        -:  507:	static_assert(__is_invocable<deleter_type&, pointer>::value,
        -:  508:		      "unique_ptr's deleter must be invocable with a pointer");
        1:  509:	_M_t.reset(std::move(__p));
call    0 returned 1
        -:  510:      }
        -:  511:
        -:  512:      /// Exchange the pointer and deleter with another object.
        -:  513:      _GLIBCXX23_CONSTEXPR
        -:  514:      void
        -:  515:      swap(unique_ptr& __u) noexcept
        -:  516:      {
        -:  517:	static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
        -:  518:	_M_t.swap(__u._M_t);
        -:  519:      }
        -:  520:
        -:  521:      // Disable copy from lvalue.
        -:  522:      unique_ptr(const unique_ptr&) = delete;
        -:  523:      unique_ptr& operator=(const unique_ptr&) = delete;
        -:  524:  };
        -:  525:
        -:  526:  // 20.7.1.3 unique_ptr for array objects with a runtime length
        -:  527:  // [unique.ptr.runtime]
        -:  528:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  529:  // DR 740 - omit specialization for array objects with a compile time length
        -:  530:
        -:  531:  /// A move-only smart pointer that manages unique ownership of an array.
        -:  532:  /// @headerfile memory
        -:  533:  /// @since C++11
        -:  534:  template<typename _Tp, typename _Dp>
        -:  535:    class unique_ptr<_Tp[], _Dp>
        -:  536:    {
        -:  537:      template <typename _Up>
        -:  538:      using _DeleterConstraint =
        -:  539:	typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;
        -:  540:
        -:  541:      __uniq_ptr_data<_Tp, _Dp> _M_t;
        -:  542:
        -:  543:      // like is_base_of<_Tp, _Up> but false if unqualified types are the same
        -:  544:      template<typename _Up>
        -:  545:	using __is_derived_Tp
        -:  546:	  = __and_< is_base_of<_Tp, _Up>,
        -:  547:		    __not_<is_same<__remove_cv_t<_Tp>, __remove_cv_t<_Up>>> >;
        -:  548:
        -:  549:    public:
        -:  550:      using pointer	  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
        -:  551:      using element_type  = _Tp;
        -:  552:      using deleter_type  = _Dp;
        -:  553:
        -:  554:      // helper template for detecting a safe conversion from another
        -:  555:      // unique_ptr
        -:  556:      template<typename _Up, typename _Ep,
        -:  557:               typename _UPtr = unique_ptr<_Up, _Ep>,
        -:  558:	       typename _UP_pointer = typename _UPtr::pointer,
        -:  559:	       typename _UP_element_type = typename _UPtr::element_type>
        -:  560:	using __safe_conversion_up = __and_<
        -:  561:          is_array<_Up>,
        -:  562:          is_same<pointer, element_type*>,
        -:  563:          is_same<_UP_pointer, _UP_element_type*>,
        -:  564:          is_convertible<_UP_element_type(*)[], element_type(*)[]>
        -:  565:        >;
        -:  566:
        -:  567:      // helper template for detecting a safe conversion from a raw pointer
        -:  568:      template<typename _Up>
        -:  569:        using __safe_conversion_raw = __and_<
        -:  570:          __or_<__or_<is_same<_Up, pointer>,
        -:  571:                      is_same<_Up, nullptr_t>>,
        -:  572:                __and_<is_pointer<_Up>,
        -:  573:                       is_same<pointer, element_type*>,
        -:  574:                       is_convertible<
        -:  575:                         typename remove_pointer<_Up>::type(*)[],
        -:  576:                         element_type(*)[]>
        -:  577:                >
        -:  578:          >
        -:  579:        >;
        -:  580:
        -:  581:      // Constructors.
        -:  582:
        -:  583:      /// Default constructor, creates a unique_ptr that owns nothing.
        -:  584:      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
        -:  585:	constexpr unique_ptr() noexcept
        -:  586:	: _M_t()
        -:  587:	{ }
        -:  588:
        -:  589:      /** Takes ownership of a pointer.
        -:  590:       *
        -:  591:       * @param __p  A pointer to an array of a type safely convertible
        -:  592:       * to an array of @c element_type
        -:  593:       *
        -:  594:       * The deleter will be value-initialized.
        -:  595:       */
        -:  596:      template<typename _Up,
        -:  597:	       typename _Vp = _Dp,
        -:  598:	       typename = _DeleterConstraint<_Vp>,
        -:  599:	       typename = typename enable_if<
        -:  600:                 __safe_conversion_raw<_Up>::value, bool>::type>
        -:  601:	_GLIBCXX23_CONSTEXPR
        -:  602:	explicit
        -:  603:	unique_ptr(_Up __p) noexcept
        -:  604:	: _M_t(__p)
        -:  605:        { }
        -:  606:
        -:  607:      /** Takes ownership of a pointer.
        -:  608:       *
        -:  609:       * @param __p  A pointer to an array of a type safely convertible
        -:  610:       * to an array of @c element_type
        -:  611:       * @param __d  A reference to a deleter.
        -:  612:       *
        -:  613:       * The deleter will be initialized with @p __d
        -:  614:       */
        -:  615:      template<typename _Up, typename _Del = deleter_type,
        -:  616:	       typename = _Require<__safe_conversion_raw<_Up>,
        -:  617:				   is_copy_constructible<_Del>>>
        -:  618:	_GLIBCXX23_CONSTEXPR
        -:  619:	unique_ptr(_Up __p, const deleter_type& __d) noexcept
        -:  620:	: _M_t(__p, __d) { }
        -:  621:
        -:  622:      /** Takes ownership of a pointer.
        -:  623:       *
        -:  624:       * @param __p  A pointer to an array of a type safely convertible
        -:  625:       * to an array of @c element_type
        -:  626:       * @param __d  A reference to a deleter.
        -:  627:       *
        -:  628:       * The deleter will be initialized with @p std::move(__d)
        -:  629:       */
        -:  630:      template<typename _Up, typename _Del = deleter_type,
        -:  631:	       typename = _Require<__safe_conversion_raw<_Up>,
        -:  632:				   is_move_constructible<_Del>>>
        -:  633:	_GLIBCXX23_CONSTEXPR
        -:  634:	unique_ptr(_Up __p,
        -:  635:		   __enable_if_t<!is_lvalue_reference<_Del>::value,
        -:  636:				 _Del&&> __d) noexcept
        -:  637:	: _M_t(std::move(__p), std::move(__d))
        -:  638:	{ }
        -:  639:
        -:  640:      template<typename _Up, typename _Del = deleter_type,
        -:  641:	       typename _DelUnref = typename remove_reference<_Del>::type,
        -:  642:	       typename = _Require<__safe_conversion_raw<_Up>>>
        -:  643:	unique_ptr(_Up,
        -:  644:		   __enable_if_t<is_lvalue_reference<_Del>::value,
        -:  645:				 _DelUnref&&>) = delete;
        -:  646:
        -:  647:      /// Move constructor.
        -:  648:      unique_ptr(unique_ptr&&) = default;
        -:  649:
        -:  650:      /// Creates a unique_ptr that owns nothing.
        -:  651:      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
        -:  652:	constexpr unique_ptr(nullptr_t) noexcept
        -:  653:	: _M_t()
        -:  654:        { }
        -:  655:
        -:  656:      template<typename _Up, typename _Ep, typename = _Require<
        -:  657:	       __safe_conversion_up<_Up, _Ep>,
        -:  658:	       __conditional_t<is_reference<_Dp>::value,
        -:  659:			       is_same<_Ep, _Dp>,
        -:  660:			       is_convertible<_Ep, _Dp>>>>
        -:  661:	_GLIBCXX23_CONSTEXPR
        -:  662:	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
        -:  663:	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
        -:  664:	{ }
        -:  665:
        -:  666:      /// Destructor, invokes the deleter if the stored pointer is not null.
        -:  667:#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
        -:  668:      constexpr
        -:  669:#endif
        -:  670:      ~unique_ptr()
        -:  671:      {
        -:  672:	auto& __ptr = _M_t._M_ptr();
        -:  673:	if (__ptr != nullptr)
        -:  674:	  get_deleter()(__ptr);
        -:  675:	__ptr = pointer();
        -:  676:      }
        -:  677:
        -:  678:      // Assignment.
        -:  679:
        -:  680:      /** @brief Move assignment operator.
        -:  681:       *
        -:  682:       * Invokes the deleter if this object owns a pointer.
        -:  683:       */
        -:  684:      unique_ptr&
        -:  685:      operator=(unique_ptr&&) = default;
        -:  686:
        -:  687:      /** @brief Assignment from another type.
        -:  688:       *
        -:  689:       * @param __u  The object to transfer ownership from, which owns a
        -:  690:       *             convertible pointer to an array object.
        -:  691:       *
        -:  692:       * Invokes the deleter if this object owns a pointer.
        -:  693:       */
        -:  694:      template<typename _Up, typename _Ep>
        -:  695:	_GLIBCXX23_CONSTEXPR
        -:  696:	typename
        -:  697:	enable_if<__and_<__safe_conversion_up<_Up, _Ep>,
        -:  698:                         is_assignable<deleter_type&, _Ep&&>
        -:  699:                  >::value,
        -:  700:                  unique_ptr&>::type
        -:  701:	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
        -:  702:	{
        -:  703:	  reset(__u.release());
        -:  704:	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
        -:  705:	  return *this;
        -:  706:	}
        -:  707:
        -:  708:      /// Reset the %unique_ptr to empty, invoking the deleter if necessary.
        -:  709:      _GLIBCXX23_CONSTEXPR
        -:  710:      unique_ptr&
        -:  711:      operator=(nullptr_t) noexcept
        -:  712:      {
        -:  713:	reset();
        -:  714:	return *this;
        -:  715:      }
        -:  716:
        -:  717:      // Observers.
        -:  718:
        -:  719:      /// Access an element of owned array.
        -:  720:      _GLIBCXX23_CONSTEXPR
        -:  721:      typename std::add_lvalue_reference<element_type>::type
        -:  722:      operator[](size_t __i) const
        -:  723:      {
        -:  724:	__glibcxx_assert(get() != pointer());
        -:  725:	return get()[__i];
        -:  726:      }
        -:  727:
        -:  728:      /// Return the stored pointer.
        -:  729:      _GLIBCXX23_CONSTEXPR
        -:  730:      pointer
        -:  731:      get() const noexcept
        -:  732:      { return _M_t._M_ptr(); }
        -:  733:
        -:  734:      /// Return a reference to the stored deleter.
        -:  735:      _GLIBCXX23_CONSTEXPR
        -:  736:      deleter_type&
        -:  737:      get_deleter() noexcept
        -:  738:      { return _M_t._M_deleter(); }
        -:  739:
        -:  740:      /// Return a reference to the stored deleter.
        -:  741:      _GLIBCXX23_CONSTEXPR
        -:  742:      const deleter_type&
        -:  743:      get_deleter() const noexcept
        -:  744:      { return _M_t._M_deleter(); }
        -:  745:
        -:  746:      /// Return @c true if the stored pointer is not null.
        -:  747:      _GLIBCXX23_CONSTEXPR
        -:  748:      explicit operator bool() const noexcept
        -:  749:      { return get() == pointer() ? false : true; }
        -:  750:
        -:  751:      // Modifiers.
        -:  752:
        -:  753:      /// Release ownership of any stored pointer.
        -:  754:      _GLIBCXX23_CONSTEXPR
        -:  755:      pointer
        -:  756:      release() noexcept
        -:  757:      { return _M_t.release(); }
        -:  758:
        -:  759:      /** @brief Replace the stored pointer.
        -:  760:       *
        -:  761:       * @param __p  The new pointer to store.
        -:  762:       *
        -:  763:       * The deleter will be invoked if a pointer is already owned.
        -:  764:       */
        -:  765:      template <typename _Up,
        -:  766:                typename = _Require<
        -:  767:                  __or_<is_same<_Up, pointer>,
        -:  768:                        __and_<is_same<pointer, element_type*>,
        -:  769:                               is_pointer<_Up>,
        -:  770:                               is_convertible<
        -:  771:                                 typename remove_pointer<_Up>::type(*)[],
        -:  772:                                 element_type(*)[]
        -:  773:                               >
        -:  774:                        >
        -:  775:                  >
        -:  776:               >>
        -:  777:      _GLIBCXX23_CONSTEXPR
        -:  778:      void
        -:  779:      reset(_Up __p) noexcept
        -:  780:      { _M_t.reset(std::move(__p)); }
        -:  781:
        -:  782:      _GLIBCXX23_CONSTEXPR
        -:  783:      void reset(nullptr_t = nullptr) noexcept
        -:  784:      { reset(pointer()); }
        -:  785:
        -:  786:      /// Exchange the pointer and deleter with another object.
        -:  787:      _GLIBCXX23_CONSTEXPR
        -:  788:      void
        -:  789:      swap(unique_ptr& __u) noexcept
        -:  790:      {
        -:  791:	static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
        -:  792:	_M_t.swap(__u._M_t);
        -:  793:      }
        -:  794:
        -:  795:      // Disable copy from lvalue.
        -:  796:      unique_ptr(const unique_ptr&) = delete;
        -:  797:      unique_ptr& operator=(const unique_ptr&) = delete;
        -:  798:    };
        -:  799:
        -:  800:  /// @{
        -:  801:  /// @relates unique_ptr
        -:  802:
        -:  803:  /// Swap overload for unique_ptr
        -:  804:  template<typename _Tp, typename _Dp>
        -:  805:    inline
        -:  806:#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
        -:  807:    // Constrained free swap overload, see p0185r1
        -:  808:    _GLIBCXX23_CONSTEXPR
        -:  809:    typename enable_if<__is_swappable<_Dp>::value>::type
        -:  810:#else
        -:  811:    void
        -:  812:#endif
        -:  813:    swap(unique_ptr<_Tp, _Dp>& __x,
        -:  814:	 unique_ptr<_Tp, _Dp>& __y) noexcept
        -:  815:    { __x.swap(__y); }
        -:  816:
        -:  817:#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
        -:  818:  template<typename _Tp, typename _Dp>
        -:  819:    typename enable_if<!__is_swappable<_Dp>::value>::type
        -:  820:    swap(unique_ptr<_Tp, _Dp>&,
        -:  821:	 unique_ptr<_Tp, _Dp>&) = delete;
        -:  822:#endif
        -:  823:
        -:  824:  /// Equality operator for unique_ptr objects, compares the owned pointers
        -:  825:  template<typename _Tp, typename _Dp,
        -:  826:	   typename _Up, typename _Ep>
        -:  827:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  828:    inline bool
        -:  829:    operator==(const unique_ptr<_Tp, _Dp>& __x,
        -:  830:	       const unique_ptr<_Up, _Ep>& __y)
        -:  831:    { return __x.get() == __y.get(); }
        -:  832:
        -:  833:  /// unique_ptr comparison with nullptr
        -:  834:  template<typename _Tp, typename _Dp>
        -:  835:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  836:    inline bool
        -:  837:    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
        -:  838:    { return !__x; }
        -:  839:
        -:  840:#ifndef __cpp_lib_three_way_comparison
        -:  841:  /// unique_ptr comparison with nullptr
        -:  842:  template<typename _Tp, typename _Dp>
        -:  843:    _GLIBCXX_NODISCARD
        -:  844:    inline bool
        -:  845:    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
        -:  846:    { return !__x; }
        -:  847:
        -:  848:  /// Inequality operator for unique_ptr objects, compares the owned pointers
        -:  849:  template<typename _Tp, typename _Dp,
        -:  850:	   typename _Up, typename _Ep>
        -:  851:    _GLIBCXX_NODISCARD
        -:  852:    inline bool
        -:  853:    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        -:  854:	       const unique_ptr<_Up, _Ep>& __y)
        -:  855:    { return __x.get() != __y.get(); }
        -:  856:
        -:  857:  /// unique_ptr comparison with nullptr
        -:  858:  template<typename _Tp, typename _Dp>
        -:  859:    _GLIBCXX_NODISCARD
        -:  860:    inline bool
        -:  861:    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
        -:  862:    { return (bool)__x; }
        -:  863:
        -:  864:  /// unique_ptr comparison with nullptr
        -:  865:  template<typename _Tp, typename _Dp>
        -:  866:    _GLIBCXX_NODISCARD
        -:  867:    inline bool
        -:  868:    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
        -:  869:    { return (bool)__x; }
        -:  870:#endif // three way comparison
        -:  871:
        -:  872:  /// Relational operator for unique_ptr objects, compares the owned pointers
        -:  873:  template<typename _Tp, typename _Dp,
        -:  874:	   typename _Up, typename _Ep>
        -:  875:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  876:    inline bool
        -:  877:    operator<(const unique_ptr<_Tp, _Dp>& __x,
        -:  878:	      const unique_ptr<_Up, _Ep>& __y)
        -:  879:    {
        -:  880:      typedef typename
        -:  881:	std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
        -:  882:	                 typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
        -:  883:      return std::less<_CT>()(__x.get(), __y.get());
        -:  884:    }
        -:  885:
        -:  886:  /// unique_ptr comparison with nullptr
        -:  887:  template<typename _Tp, typename _Dp>
        -:  888:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  889:    inline bool
        -:  890:    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
        -:  891:    {
        -:  892:      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
        -:  893:								 nullptr);
        -:  894:    }
        -:  895:
        -:  896:  /// unique_ptr comparison with nullptr
        -:  897:  template<typename _Tp, typename _Dp>
        -:  898:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  899:    inline bool
        -:  900:    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
        -:  901:    {
        -:  902:      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
        -:  903:								 __x.get());
        -:  904:    }
        -:  905:
        -:  906:  /// Relational operator for unique_ptr objects, compares the owned pointers
        -:  907:  template<typename _Tp, typename _Dp,
        -:  908:	   typename _Up, typename _Ep>
        -:  909:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  910:    inline bool
        -:  911:    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        -:  912:	       const unique_ptr<_Up, _Ep>& __y)
        -:  913:    { return !(__y < __x); }
        -:  914:
        -:  915:  /// unique_ptr comparison with nullptr
        -:  916:  template<typename _Tp, typename _Dp>
        -:  917:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  918:    inline bool
        -:  919:    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
        -:  920:    { return !(nullptr < __x); }
        -:  921:
        -:  922:  /// unique_ptr comparison with nullptr
        -:  923:  template<typename _Tp, typename _Dp>
        -:  924:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  925:    inline bool
        -:  926:    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
        -:  927:    { return !(__x < nullptr); }
        -:  928:
        -:  929:  /// Relational operator for unique_ptr objects, compares the owned pointers
        -:  930:  template<typename _Tp, typename _Dp,
        -:  931:	   typename _Up, typename _Ep>
        -:  932:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  933:    inline bool
        -:  934:    operator>(const unique_ptr<_Tp, _Dp>& __x,
        -:  935:	      const unique_ptr<_Up, _Ep>& __y)
        -:  936:    { return (__y < __x); }
        -:  937:
        -:  938:  /// unique_ptr comparison with nullptr
        -:  939:  template<typename _Tp, typename _Dp>
        -:  940:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  941:    inline bool
        -:  942:    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
        -:  943:    {
        -:  944:      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
        -:  945:								 __x.get());
        -:  946:    }
        -:  947:
        -:  948:  /// unique_ptr comparison with nullptr
        -:  949:  template<typename _Tp, typename _Dp>
        -:  950:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  951:    inline bool
        -:  952:    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
        -:  953:    {
        -:  954:      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
        -:  955:								 nullptr);
        -:  956:    }
        -:  957:
        -:  958:  /// Relational operator for unique_ptr objects, compares the owned pointers
        -:  959:  template<typename _Tp, typename _Dp,
        -:  960:	   typename _Up, typename _Ep>
        -:  961:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  962:    inline bool
        -:  963:    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        -:  964:	       const unique_ptr<_Up, _Ep>& __y)
        -:  965:    { return !(__x < __y); }
        -:  966:
        -:  967:  /// unique_ptr comparison with nullptr
        -:  968:  template<typename _Tp, typename _Dp>
        -:  969:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  970:    inline bool
        -:  971:    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
        -:  972:    { return !(__x < nullptr); }
        -:  973:
        -:  974:  /// unique_ptr comparison with nullptr
        -:  975:  template<typename _Tp, typename _Dp>
        -:  976:    _GLIBCXX_NODISCARD inline bool
        -:  977:    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
        -:  978:    { return !(nullptr < __x); }
        -:  979:
        -:  980:#ifdef __cpp_lib_three_way_comparison
        -:  981:  template<typename _Tp, typename _Dp, typename _Up, typename _Ep>
        -:  982:    requires three_way_comparable_with<typename unique_ptr<_Tp, _Dp>::pointer,
        -:  983:				       typename unique_ptr<_Up, _Ep>::pointer>
        -:  984:    _GLIBCXX23_CONSTEXPR
        -:  985:    inline
        -:  986:    compare_three_way_result_t<typename unique_ptr<_Tp, _Dp>::pointer,
        -:  987:			       typename unique_ptr<_Up, _Ep>::pointer>
        -:  988:    operator<=>(const unique_ptr<_Tp, _Dp>& __x,
        -:  989:		const unique_ptr<_Up, _Ep>& __y)
        -:  990:    { return compare_three_way()(__x.get(), __y.get()); }
        -:  991:
        -:  992:  template<typename _Tp, typename _Dp>
        -:  993:    requires three_way_comparable<typename unique_ptr<_Tp, _Dp>::pointer>
        -:  994:    _GLIBCXX23_CONSTEXPR
        -:  995:    inline
        -:  996:    compare_three_way_result_t<typename unique_ptr<_Tp, _Dp>::pointer>
        -:  997:    operator<=>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
        -:  998:    {
        -:  999:      using pointer = typename unique_ptr<_Tp, _Dp>::pointer;
        -: 1000:      return compare_three_way()(__x.get(), static_cast<pointer>(nullptr));
        -: 1001:    }
        -: 1002:#endif
        -: 1003:  /// @} relates unique_ptr
        -: 1004:
        -: 1005:  /// @cond undocumented
        -: 1006:  template<typename _Up, typename _Ptr = typename _Up::pointer,
        -: 1007:	   bool = __poison_hash<_Ptr>::__enable_hash_call>
        -: 1008:    struct __uniq_ptr_hash
        -: 1009:#if ! _GLIBCXX_INLINE_VERSION
        -: 1010:    : private __poison_hash<_Ptr>
        -: 1011:#endif
        -: 1012:    {
        -: 1013:      size_t
        -: 1014:      operator()(const _Up& __u) const
        -: 1015:      noexcept(noexcept(std::declval<hash<_Ptr>>()(std::declval<_Ptr>())))
        -: 1016:      { return hash<_Ptr>()(__u.get()); }
        -: 1017:    };
        -: 1018:
        -: 1019:  template<typename _Up, typename _Ptr>
        -: 1020:    struct __uniq_ptr_hash<_Up, _Ptr, false>
        -: 1021:    : private __poison_hash<_Ptr>
        -: 1022:    { };
        -: 1023:  /// @endcond
        -: 1024:
        -: 1025:  /// std::hash specialization for unique_ptr.
        -: 1026:  template<typename _Tp, typename _Dp>
        -: 1027:    struct hash<unique_ptr<_Tp, _Dp>>
        -: 1028:    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,
        -: 1029:      public __uniq_ptr_hash<unique_ptr<_Tp, _Dp>>
        -: 1030:    { };
        -: 1031:
        -: 1032:#if __cplusplus >= 201402L && _GLIBCXX_HOSTED
        -: 1033:#define __cpp_lib_make_unique 201304L
        -: 1034:
        -: 1035:  /// @cond undocumented
        -: 1036:namespace __detail
        -: 1037:{
        -: 1038:  template<typename _Tp>
        -: 1039:    struct _MakeUniq
        -: 1040:    { typedef unique_ptr<_Tp> __single_object; };
        -: 1041:
        -: 1042:  template<typename _Tp>
        -: 1043:    struct _MakeUniq<_Tp[]>
        -: 1044:    { typedef unique_ptr<_Tp[]> __array; };
        -: 1045:
        -: 1046:  template<typename _Tp, size_t _Bound>
        -: 1047:    struct _MakeUniq<_Tp[_Bound]>
        -: 1048:    { struct __invalid_type { }; };
        -: 1049:
        -: 1050:  template<typename _Tp>
        -: 1051:    using __unique_ptr_t = typename _MakeUniq<_Tp>::__single_object;
        -: 1052:  template<typename _Tp>
        -: 1053:    using __unique_ptr_array_t = typename _MakeUniq<_Tp>::__array;
        -: 1054:  template<typename _Tp>
        -: 1055:    using __invalid_make_unique_t = typename _MakeUniq<_Tp>::__invalid_type;
        -: 1056:}
        -: 1057:  /// @endcond
        -: 1058:
        -: 1059:  /** Create an object owned by a `unique_ptr`.
        -: 1060:   *  @tparam _Tp A non-array object type.
        -: 1061:   *  @param __args Constructor arguments for the new object.
        -: 1062:   *  @returns A `unique_ptr<_Tp>` that owns the new object.
        -: 1063:   *  @since C++14
        -: 1064:   *  @relates unique_ptr
        -: 1065:   */
        -: 1066:  template<typename _Tp, typename... _Args>
        -: 1067:    _GLIBCXX23_CONSTEXPR
        -: 1068:    inline __detail::__unique_ptr_t<_Tp>
        -: 1069:    make_unique(_Args&&... __args)
    #####: 1070:    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
    %%%%%: 1070-block  0
call    0 never executed
        -: 1071:
        -: 1072:  /** Create an array owned by a `unique_ptr`.
        -: 1073:   *  @tparam _Tp An array type of unknown bound, such as `U[]`.
        -: 1074:   *  @param __num The number of elements of type `U` in the new array.
        -: 1075:   *  @returns A `unique_ptr<U[]>` that owns the new array.
        -: 1076:   *  @since C++14
        -: 1077:   *  @relates unique_ptr
        -: 1078:   *
        -: 1079:   *  The array elements are value-initialized.
        -: 1080:   */
        -: 1081:  template<typename _Tp>
        -: 1082:    _GLIBCXX23_CONSTEXPR
        -: 1083:    inline __detail::__unique_ptr_array_t<_Tp>
        -: 1084:    make_unique(size_t __num)
        -: 1085:    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
        -: 1086:
        -: 1087:  /** Disable std::make_unique for arrays of known bound.
        -: 1088:   *  @tparam _Tp An array type of known bound, such as `U[N]`.
        -: 1089:   *  @since C++14
        -: 1090:   *  @relates unique_ptr
        -: 1091:   */
        -: 1092:  template<typename _Tp, typename... _Args>
        -: 1093:    __detail::__invalid_make_unique_t<_Tp>
        -: 1094:    make_unique(_Args&&...) = delete;
        -: 1095:
        -: 1096:#if __cplusplus > 201703L
        -: 1097:  /** Create a default-initialied object owned by a `unique_ptr`.
        -: 1098:   *  @tparam _Tp A non-array object type.
        -: 1099:   *  @returns A `unique_ptr<_Tp>` that owns the new object.
        -: 1100:   *  @since C++20
        -: 1101:   *  @relates unique_ptr
        -: 1102:   */
        -: 1103:  template<typename _Tp>
        -: 1104:    _GLIBCXX23_CONSTEXPR
        -: 1105:    inline __detail::__unique_ptr_t<_Tp>
        -: 1106:    make_unique_for_overwrite()
        -: 1107:    { return unique_ptr<_Tp>(new _Tp); }
        -: 1108:
        -: 1109:  /** Create a default-initialized array owned by a `unique_ptr`.
        -: 1110:   *  @tparam _Tp An array type of unknown bound, such as `U[]`.
        -: 1111:   *  @param __num The number of elements of type `U` in the new array.
        -: 1112:   *  @returns A `unique_ptr<U[]>` that owns the new array.
        -: 1113:   *  @since C++20
        -: 1114:   *  @relates unique_ptr
        -: 1115:   */
        -: 1116:  template<typename _Tp>
        -: 1117:    _GLIBCXX23_CONSTEXPR
        -: 1118:    inline __detail::__unique_ptr_array_t<_Tp>
        -: 1119:    make_unique_for_overwrite(size_t __num)
        -: 1120:    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]); }
        -: 1121:
        -: 1122:  /** Disable std::make_unique_for_overwrite for arrays of known bound.
        -: 1123:   *  @tparam _Tp An array type of known bound, such as `U[N]`.
        -: 1124:   *  @since C++20
        -: 1125:   *  @relates unique_ptr
        -: 1126:   */
        -: 1127:  template<typename _Tp, typename... _Args>
        -: 1128:    __detail::__invalid_make_unique_t<_Tp>
        -: 1129:    make_unique_for_overwrite(_Args&&...) = delete;
        -: 1130:#endif // C++20
        -: 1131:
        -: 1132:#endif // C++14 && HOSTED
        -: 1133:
        -: 1134:#if __cplusplus > 201703L && __cpp_concepts && _GLIBCXX_HOSTED
        -: 1135:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 1136:  // 2948. unique_ptr does not define operator<< for stream output
        -: 1137:  /// Stream output operator for unique_ptr
        -: 1138:  /// @relates unique_ptr
        -: 1139:  /// @since C++20
        -: 1140:  template<typename _CharT, typename _Traits, typename _Tp, typename _Dp>
        -: 1141:    inline basic_ostream<_CharT, _Traits>&
        -: 1142:    operator<<(basic_ostream<_CharT, _Traits>& __os,
        -: 1143:	       const unique_ptr<_Tp, _Dp>& __p)
        -: 1144:    requires requires { __os << __p.get(); }
        -: 1145:    {
        -: 1146:      __os << __p.get();
        -: 1147:      return __os;
        -: 1148:    }
        -: 1149:#endif // C++20 && HOSTED
        -: 1150:
        -: 1151:  /// @} group pointer_abstractions
        -: 1152:
        -: 1153:#if __cplusplus >= 201703L
        -: 1154:  namespace __detail::__variant
        -: 1155:  {
        -: 1156:    template<typename> struct _Never_valueless_alt; // see <variant>
        -: 1157:
        -: 1158:    // Provide the strong exception-safety guarantee when emplacing a
        -: 1159:    // unique_ptr into a variant.
        -: 1160:    template<typename _Tp, typename _Del>
        -: 1161:      struct _Never_valueless_alt<std::unique_ptr<_Tp, _Del>>
        -: 1162:      : std::true_type
        -: 1163:      { };
        -: 1164:  }  // namespace __detail::__variant
        -: 1165:#endif // C++17
        -: 1166:
        -: 1167:_GLIBCXX_END_NAMESPACE_VERSION
        -: 1168:} // namespace
        -: 1169:
        -: 1170:#endif /* _UNIQUE_PTR_H */
