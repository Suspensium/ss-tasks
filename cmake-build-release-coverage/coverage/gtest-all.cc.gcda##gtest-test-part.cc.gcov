        -:    0:Source:D:/Projects/SoftAcademy/Tasks/googletest/googletest/src/gtest-test-part.cc
        -:    0:Graph:D:\Projects\SoftAcademy\Tasks\cmake-build-release-coverage\googletest\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\Projects\SoftAcademy\Tasks\cmake-build-release-coverage\googletest\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest-test-part.h"
        -:   34:
        -:   35:#include <ostream>
        -:   36:#include <string>
        -:   37:
        -:   38:#include "gtest/internal/gtest-port.h"
        -:   39:#include "src/gtest-internal-inl.h"
        -:   40:
        -:   41:namespace testing {
        -:   42:
        -:   43:// Gets the summary of the failure message by omitting the stack trace
        -:   44:// in it.
function _ZN7testing14TestPartResult14ExtractSummaryB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####:   45:std::string TestPartResult::ExtractSummary(const char* message) {
    #####:   46:  const char* const stack_trace = strstr(message, internal::kStackTraceMarker);
    #####:   47:  return stack_trace == nullptr ? message : std::string(message, stack_trace);
    %%%%%:   47-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   47-block  1
call    2 never executed
        -:   48:}
        -:   49:
        -:   50:// Prints a TestPartResult object.
function _ZN7testinglsERSoRKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   51:std::ostream& operator<<(std::ostream& os, const TestPartResult& result) {
    %%%%%:   51-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   52:  return os << internal::FormatFileLocation(result.file_name(),
    %%%%%:   52-block  0
call    0 never executed
        -:   53:                                            result.line_number())
        -:   54:            << " "
        -:   55:            << (result.type() == TestPartResult::kSuccess ? "Success"
    #####:   56:                : result.type() == TestPartResult::kSkip  ? "Skipped"
    %%%%%:   56-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   57:                : result.type() == TestPartResult::kFatalFailure
    #####:   58:                    ? "Fatal failure"
    %%%%%:   58-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   59:                    : "Non-fatal failure")
        -:   60:            << ":\n"
    #####:   61:            << result.message() << std::endl;
    %%%%%:   61-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   61-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:   61-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
        -:   62:}
        -:   63:
        -:   64:// Appends a TestPartResult to the array.
function _ZN7testing19TestPartResultArray6AppendERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   65:void TestPartResultArray::Append(const TestPartResult& result) {
    #####:   66:  array_.push_back(result);
    %%%%%:   66-block  0
call    0 never executed
    %%%%%:   66-block  1
call    1 never executed
    #####:   67:}
        -:   68:
        -:   69:// Returns the TestPartResult at the given index (0-based).
function _ZNK7testing19TestPartResultArray17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####:   70:const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {
    #####:   71:  if (index < 0 || index >= size()) {
    %%%%%:   71-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   72:    printf("\nInvalid index (%d) into TestPartResultArray.\n", index);
    %%%%%:   72-block  0
call    0 never executed
        -:   73:    internal::posix::Abort();
        -:   74:  }
        -:   75:
    #####:   76:  return array_[static_cast<size_t>(index)];
        -:   77:}
        -:   78:
        -:   79:// Returns the number of TestPartResult objects in the array.
function _ZNK7testing19TestPartResultArray4sizeEv called 0 returned 0% blocks executed 0%
    #####:   80:int TestPartResultArray::size() const {
    #####:   81:  return static_cast<int>(array_.size());
    %%%%%:   81-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   81-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:   81-block  2
branch  5 never executed
branch  6 never executed (fallthrough)
    %%%%%:   81-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
        -:   82:}
        -:   83:
        -:   84:namespace internal {
        -:   85:
function _ZN7testing8internal24HasNewFatalFailureHelperC2Ev called 0 returned 0% blocks executed 0%
    #####:   86:HasNewFatalFailureHelper::HasNewFatalFailureHelper()
    #####:   87:    : has_new_fatal_failure_(false),
    #####:   88:      original_reporter_(
call    0 never executed
    #####:   89:          GetUnitTestImpl()->GetTestPartResultReporterForCurrentThread()) {
    %%%%%:   89-block  0
call    0 never executed
    #####:   90:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
    #####:   91:}
        -:   92:
    #####:   93:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
    #####:   94:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
        -:   95:      original_reporter_);
    #####:   96:}
------------------
_ZN7testing8internal24HasNewFatalFailureHelperD0Ev:
function _ZN7testing8internal24HasNewFatalFailureHelperD0Ev called 0 returned 0% blocks executed 0%
    #####:   93:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
        -:   94:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
        -:   95:      original_reporter_);
    #####:   96:}
    %%%%%:   96-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal24HasNewFatalFailureHelperD2Ev:
function _ZN7testing8internal24HasNewFatalFailureHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:   93:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
    %%%%%:   93-block  0
call    0 never executed
    #####:   94:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
call    0 never executed
        -:   95:      original_reporter_);
    #####:   96:}
------------------
        -:   97:
function _ZN7testing8internal24HasNewFatalFailureHelper20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   98:void HasNewFatalFailureHelper::ReportTestPartResult(
    %%%%%:   98-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   99:    const TestPartResult& result) {
    #####:  100:  if (result.fatally_failed()) has_new_fatal_failure_ = true;
    %%%%%:  100-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  100-block  1
    #####:  101:  original_reporter_->ReportTestPartResult(result);
    %%%%%:  101-block  0
call    0 never executed
    #####:  102:}
        -:  103:
        -:  104:}  // namespace internal
        -:  105:
        -:  106:}  // namespace testing
